<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:hashnode="https://hashnode.com/rss" version="2.0">
<channel>
<title>
<![CDATA[ Aditya's blog ]]>
</title>
<description>
<![CDATA[ Aditya's blog ]]>
</description>
<link>https://adityabverma.hashnode.dev</link>
<generator>RSS for Node</generator>
<lastBuildDate>Fri, 15 Aug 2025 16:58:13 GMT</lastBuildDate>
<atom:link href="https://adityabverma.hashnode.dev/rss.xml" rel="self" type="application/rss+xml"/>
<language>
<![CDATA[ en ]]>
</language>
<ttl>60</ttl>
<atom:link rel="next" href="https://adityabverma.hashnode.dev/rss.xml?page=2"/>
<atom:link rel="previous" href="https://adityabverma.hashnode.dev/rss.xml"/>
<item>
<title>
<![CDATA[ Maximizing Multer: Advanced Configuration and Tips for Powerful File Uploads ]]>
</title>
<description>
<![CDATA[ Discover how to maximize Multer's capabilities for file uploads in Node.js. Learn advanced configurations, validation tips, and best practices to handle fil ]]>
</description>
<link>https://adityabverma.hashnode.dev/maximizing-multer-advanced-configuration-and-tips-for-powerful-file-uploads</link>
<guid isPermaLink="true">https://adityabverma.hashnode.dev/maximizing-multer-advanced-configuration-and-tips-for-powerful-file-uploads</guid>
<category>
<![CDATA[ FileUploads ]]>
</category>
<category>
<![CDATA[ FileHandling ]]>
</category>
<category>
<![CDATA[ advanced-configuration ]]>
</category>
<category>
<![CDATA[ FileSizeLimits ]]>
</category>
<category>
<![CDATA[ NodejsMiddleware ]]>
</category>
<category>
<![CDATA[ DevelopmentTips ]]>
</category>
<category>
<![CDATA[ Node.js ]]>
</category>
<category>
<![CDATA[ multer ]]>
</category>
<category>
<![CDATA[ Backend Development ]]>
</category>
<category>
<![CDATA[ Web Development ]]>
</category>
<category>
<![CDATA[ Express.js ]]>
</category>
<category>
<![CDATA[ Middleware ]]>
</category>
<category>
<![CDATA[ MIME-Types ]]>
</category>
<category>
<![CDATA[ CodingBestPractices ]]>
</category>
<dc:creator>
<![CDATA[ Aditya Verma ]]>
</dc:creator>
<pubDate>Sun, 08 Sep 2024 15:07:34 GMT</pubDate>
<content:encoded><![CDATA[<p>Many of you might be using multer to store the files uploaded by the user first in your server and then in some cloud to provide atomicity in your web applications. For this you might me using multer or some of you might be uploading the files directly in some cloud storage like Azure Blob or AWS buckets.</p><p>When using multer to store files by the user directly in you server, Do y'all as backend dev's really trust the users? Will the incoming file always be just a image video or pdf? What if it is an .exe or .MSI or .jar? Or if it is so large that it overwhelms your server?</p><h2 id="heading-storage">storage</h2><p>You might be familiar with the storage options multer provides. But there is more to it.</p><pre><code class="lang-javascript"><span class="hljs-keyword">import</span> multer <span class="hljs-keyword">from</span> <span class="hljs-string">"multer"</span>;<span class="hljs-comment">// DiskStorage</span><span class="hljs-keyword">const</span> storage = multer.diskStorage({ <span class="hljs-attr">destination</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, file, cb</span>) </span>{ cb(<span class="hljs-literal">null</span>, <span class="hljs-string">"./public/temp"</span>) }, <span class="hljs-attr">filename</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, file, cb</span>) </span>{ cb(<span class="hljs-literal">null</span>, <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-built_in">Date</span>.now()}</span>-<span class="hljs-subst">${file.originalname}</span>`</span>) }})<span class="hljs-comment">/*----- OR ----- MemoryStorage------const storage = multer.memoryStorage()*/</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> upload = multer({storage})</code></pre><p>This is what a basic multer middleware looks like. However more can be added to this to limit and filter your uploads.</p><p>The <code>file</code> is an object provided by multer which is used for handling the multipart/form-data. When a file is uploaded, Multer processes it and makes it available in the <code>req</code> object in your route handler.</p><p>The file contains information like :</p><div class="hn-table"><table><thead><tr><td>Key</td><td>Description</td><td>Note</td></tr></thead><tbody><tr><td><code>fieldname</code></td><td>Field name specified in the form</td><td></td></tr><tr><td><code>originalname</code></td><td>Name of the file on the users computer</td><td></td></tr><tr><td><code>encoding</code></td><td>Encoding type of the file</td><td></td></tr><tr><td><code>mimetype</code></td><td>Mime type of the file</td><td></td></tr><tr><td><code>size</code></td><td>Size of the file in bytes</td><td></td></tr><tr><td><code>destination</code></td><td>The folder to which the file has been saved</td><td><code>DiskStorage</code></td></tr><tr><td><code>filename</code></td><td>The name of the file within the <code>destination</code></td><td><code>DiskStorage</code></td></tr><tr><td><code>path</code></td><td>The full path to the uploaded file</td><td><code>DiskStorage</code></td></tr><tr><td><code>buffer</code></td><td>A <code>Buffer</code> of the entire file</td><td><code>MemoryStorage</code></td></tr></tbody></table></div><p>This will be useful in setting up later configurations for your uploads.</p><h2 id="heading-filefilter">fileFilter</h2><p>Set this to a function to control which files should be uploaded and which should be skipped. The function should look like this:</p><pre><code class="lang-javascript"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">"path"</span><span class="hljs-keyword">const</span> fileFilter = <span class="hljs-function">(<span class="hljs-params">req, file, cb</span>) =&gt;</span> {<span class="hljs-comment">// The extensions you want to allow</span> <span class="hljs-keyword">const</span> allowedExtensions = [ <span class="hljs-string">'.jpeg'</span>, <span class="hljs-string">'.jpg'</span>, <span class="hljs-string">'.png'</span>, <span class="hljs-string">'.gif'</span>, <span class="hljs-string">'.bmp'</span>, <span class="hljs-string">'.tiff'</span>, <span class="hljs-string">'.svg'</span>, <span class="hljs-string">'.mp4'</span>, <span class="hljs-string">'.mov'</span>, <span class="hljs-string">'.mkv'</span>, <span class="hljs-string">'.avi'</span>, <span class="hljs-string">'.webm'</span>, <span class="hljs-string">'.3gp'</span>, <span class="hljs-string">'.pdf'</span>, <span class="hljs-string">'.doc'</span>, <span class="hljs-string">'.docx'</span>, <span class="hljs-string">'.epub'</span>, <span class="hljs-string">'.tar'</span>, <span class="hljs-string">'.zip'</span>, <span class="hljs-string">'.rar'</span>, <span class="hljs-string">'.mp3'</span>, <span class="hljs-string">'.wav'</span>, <span class="hljs-string">'.ogg'</span>, <span class="hljs-string">'.aac'</span>, <span class="hljs-string">'.txt'</span>, <span class="hljs-string">'.html'</span>, <span class="hljs-string">'.json'</span>, <span class="hljs-string">'.xml'</span>, <span class="hljs-string">'.gz'</span>, <span class="hljs-string">'.bz2'</span>, <span class="hljs-string">'.7z'</span>, <span class="hljs-string">'.iso'</span> ]<span class="hljs-comment">// The mimetypes for the extensions you want to allow</span> <span class="hljs-keyword">const</span> allowedMimeTypes = [ <span class="hljs-string">'image/jpeg'</span>, <span class="hljs-string">'image/png'</span>, <span class="hljs-string">'image/gif'</span>, <span class="hljs-string">'image/bmp'</span>, <span class="hljs-string">'image/tiff'</span>, <span class="hljs-string">'image/svg+xml'</span>, <span class="hljs-string">'video/mp4'</span>, <span class="hljs-string">'video/quicktime'</span>, <span class="hljs-string">'video/x-matroska'</span>, <span class="hljs-string">'video/avi'</span>, <span class="hljs-string">'video/webm'</span>, <span class="hljs-string">'video/3gpp'</span>, <span class="hljs-string">'application/pdf'</span>, <span class="hljs-string">'application/msword'</span>, <span class="hljs-string">'application/vnd.openxmlformats-officedocument.wordprocessingml.document'</span>, <span class="hljs-string">'application/epub+zip'</span>, <span class="hljs-string">'application/x-tar'</span>, <span class="hljs-string">'application/zip'</span>, <span class="hljs-string">'application/x-rar-compressed'</span>, <span class="hljs-string">'audio/mpeg'</span>, <span class="hljs-string">'audio/wav'</span>, <span class="hljs-string">'audio/ogg'</span>, <span class="hljs-string">'audio/aac'</span>, <span class="hljs-string">'text/plain'</span>, <span class="hljs-string">'text/html'</span>, <span class="hljs-string">'application/json'</span>, <span class="hljs-string">'application/xml'</span>, <span class="hljs-string">'application/gzip'</span>, <span class="hljs-string">'application/x-bzip2'</span>, <span class="hljs-string">'application/x-7z-compressed'</span>, <span class="hljs-string">'application/x-iso9660-image'</span> ]<span class="hljs-comment">// get the extension and mimetype of the file</span> <span class="hljs-keyword">const</span> extname = path.extname(file.originalname).toLowerCase() <span class="hljs-keyword">const</span> mimetype = file.mimetype;<span class="hljs-comment">// Check if the extname and mimetype is valid</span> <span class="hljs-keyword">const</span> isExtensionValid = allowedExtensions.includes(extname) <span class="hljs-keyword">const</span> isMimetypeValid = allowedMimeTypes.includes(mimetype)<span class="hljs-comment">// return callback if both are valid</span> <span class="hljs-keyword">if</span> (isExtensionValid &amp;&amp; isMimetypeValid) { <span class="hljs-keyword">return</span> cb(<span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>) } <span class="hljs-keyword">else</span> { <span class="hljs-keyword">return</span> cb(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Unsupported file type'</span>), <span class="hljs-literal">false</span>) }}</code></pre><p>So what's going on?</p><ul><li><p>Create an array for the <code>extensions</code> you want to allow</p></li><li><p>Create another array for the <code>mimetypes</code> you want to allow</p><p> why mimes? when we can check for .exe files in extensions?<br /> we will discuss this in the later part of this blog.</p></li><li><p>Get the extension of the file with the help of <code>path</code> module in <code>node.js</code>.<br /> <code>path</code> module helps in handling the path of the files<br /> eg. <code>dirname/filename.txt</code></p></li><li><p>Get the MIME of the file<br /> the file object contains this info which was discussed the the above part</p></li><li><p>Check weather the extname and mimetype of the file matches any values in the allowed extension and mime array.</p></li><li><p>If both are present return the callback to indicate weather it is to be accepted or rejected</p></li></ul><h3 id="heading-what-are-mimes-why-are-they-required">What are MIMES ? Why are they required?</h3><p>MIME (Multipurpose Internet Mail Extensions) are a standard way of identifying and handling the document based on the content in it. MIME types consist of a primary type and a sub-type, separated by a slash (e.g., <code>text/plain</code>, <code>application/pdf</code>, <code>video/mp4</code>).</p><p>Importance :</p><ul><li><p><strong>Accuracy</strong>: MIME types give a more accurate description of the file types than extensions.</p></li><li><p><strong>Security</strong>: Relying solely on file extensions is not sufficient for identifying file types because a file with a <code>.jpg</code> extension could actually be an executable or malware. MIME types provide an additional layer of identification by examining the file's content. However, MIME types alone are also not foolproof. It's important to use a combination of file extensions, MIME type checking, and content analysis to ensure accurate identification and to enhance security.</p><p> Like even if the file is exe it will be opened in acc to the mime and it will not be harmfull until the exe file is meant to be executed in image.</p></li><li><p><strong>Web and Network Protocols</strong>: MIME types are used in HTTP headers, email, and other network protocols to properly handle and display files. For example, a web server might send a file with <code>Content-Type: image/jpeg</code> to tell the browser that the file should be displayed as an image.<br /> Examples</p><ol><li><p><strong>Correct Handling</strong>:</p><ul><li><p><strong>File Extension</strong>: <code>.jpeg</code></p></li><li><p><strong>MIME Type</strong>: <code>image/jpeg</code></p></li><li><p><strong>Usage</strong>: The browser or application processes it as an image.</p></li></ul></li><li><p><strong>Potential Issue</strong>:</p><ul><li><p><strong>File Extension</strong>: <code>.jpeg</code></p></li><li><p><strong>MIME Type</strong>: <code>application/pdf</code> (incorrect)</p></li><li><p><strong>Usage</strong>: The application might try to open the file as a PDF, leading to errors or incorrect handling.</p></li></ul></li></ol></li></ul><h3 id="heading-limits">limits</h3><p>An object specifying the size limits of the following optional properties.</p><div class="hn-table"><table><thead><tr><td>Key</td><td>Description</td><td>Default</td></tr></thead><tbody><tr><td><code>fieldNameSize</code></td><td>Max field name size</td><td>100 bytes</td></tr><tr><td><code>fieldSize</code></td><td>Max field value size (in bytes)</td><td>1MB</td></tr><tr><td><code>fields</code></td><td>Max number of non-file fields</td><td>Infinity</td></tr><tr><td><code>fileSize</code></td><td>For multipart forms, the max file size (in bytes)</td><td>Infinity</td></tr><tr><td><code>files</code></td><td>For multipart forms, the max number of file fields</td><td>Infinity</td></tr><tr><td><code>parts</code></td><td>For multipart forms, the max number of parts (fields + files)</td><td>Infinity</td></tr><tr><td><code>headerPairs</code></td><td>For multipart forms, the max number of header key=&gt;value pairs to parse</td><td>2000</td></tr></tbody></table></div><pre><code class="lang-javascript">limits: { <span class="hljs-attr">fileSize</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span> }</code></pre><p>1 MB = 1024 * 1024 bytes<br />Therefore 50 MB is the size limit set for a file .</p><pre><code class="lang-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> upload = multer({ storage, fileFilter, <span class="hljs-attr">limits</span>: { <span class="hljs-attr">fileSize</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span> }})</code></pre><p>So this is how we can use multer to the fullest and elevate or backend applications.<br />I came to know this while I was building my personal project and thought it was worth sharing.</p><hr /><h3 id="heading-references">References</h3><p><a target="_blank" href="https://expressjs.com/en/resources/middleware/multer.html">Express Multer</a></p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others, and following me on <a target="_blank" href="https://x.com/AdityaVerm20240">Twitter</a> and <a target="_blank" href="http://www.linkedin.com/in/aditya-verma-6ab107308">LinkedIn</a>.</p><p>🥰 Thank You for reading.</p>]]></content:encoded>
<hashnode:content><![CDATA[<p>Many of you might be using multer to store the files uploaded by the user first in your server and then in some cloud to provide atomicity in your web applications. For this you might me using multer or some of you might be uploading the files directly in some cloud storage like Azure Blob or AWS buckets.</p><p>When using multer to store files by the user directly in you server, Do y'all as backend dev's really trust the users? Will the incoming file always be just a image video or pdf? What if it is an .exe or .MSI or .jar? Or if it is so large that it overwhelms your server?</p><h2 id="heading-storage">storage</h2><p>You might be familiar with the storage options multer provides. But there is more to it.</p><pre><code class="lang-javascript"><span class="hljs-keyword">import</span> multer <span class="hljs-keyword">from</span> <span class="hljs-string">"multer"</span>;<span class="hljs-comment">// DiskStorage</span><span class="hljs-keyword">const</span> storage = multer.diskStorage({ <span class="hljs-attr">destination</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, file, cb</span>) </span>{ cb(<span class="hljs-literal">null</span>, <span class="hljs-string">"./public/temp"</span>) }, <span class="hljs-attr">filename</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, file, cb</span>) </span>{ cb(<span class="hljs-literal">null</span>, <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-built_in">Date</span>.now()}</span>-<span class="hljs-subst">${file.originalname}</span>`</span>) }})<span class="hljs-comment">/*----- OR ----- MemoryStorage------const storage = multer.memoryStorage()*/</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> upload = multer({storage})</code></pre><p>This is what a basic multer middleware looks like. However more can be added to this to limit and filter your uploads.</p><p>The <code>file</code> is an object provided by multer which is used for handling the multipart/form-data. When a file is uploaded, Multer processes it and makes it available in the <code>req</code> object in your route handler.</p><p>The file contains information like :</p><div class="hn-table"><table><thead><tr><td>Key</td><td>Description</td><td>Note</td></tr></thead><tbody><tr><td><code>fieldname</code></td><td>Field name specified in the form</td><td></td></tr><tr><td><code>originalname</code></td><td>Name of the file on the users computer</td><td></td></tr><tr><td><code>encoding</code></td><td>Encoding type of the file</td><td></td></tr><tr><td><code>mimetype</code></td><td>Mime type of the file</td><td></td></tr><tr><td><code>size</code></td><td>Size of the file in bytes</td><td></td></tr><tr><td><code>destination</code></td><td>The folder to which the file has been saved</td><td><code>DiskStorage</code></td></tr><tr><td><code>filename</code></td><td>The name of the file within the <code>destination</code></td><td><code>DiskStorage</code></td></tr><tr><td><code>path</code></td><td>The full path to the uploaded file</td><td><code>DiskStorage</code></td></tr><tr><td><code>buffer</code></td><td>A <code>Buffer</code> of the entire file</td><td><code>MemoryStorage</code></td></tr></tbody></table></div><p>This will be useful in setting up later configurations for your uploads.</p><h2 id="heading-filefilter">fileFilter</h2><p>Set this to a function to control which files should be uploaded and which should be skipped. The function should look like this:</p><pre><code class="lang-javascript"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">"path"</span><span class="hljs-keyword">const</span> fileFilter = <span class="hljs-function">(<span class="hljs-params">req, file, cb</span>) =&gt;</span> {<span class="hljs-comment">// The extensions you want to allow</span> <span class="hljs-keyword">const</span> allowedExtensions = [ <span class="hljs-string">'.jpeg'</span>, <span class="hljs-string">'.jpg'</span>, <span class="hljs-string">'.png'</span>, <span class="hljs-string">'.gif'</span>, <span class="hljs-string">'.bmp'</span>, <span class="hljs-string">'.tiff'</span>, <span class="hljs-string">'.svg'</span>, <span class="hljs-string">'.mp4'</span>, <span class="hljs-string">'.mov'</span>, <span class="hljs-string">'.mkv'</span>, <span class="hljs-string">'.avi'</span>, <span class="hljs-string">'.webm'</span>, <span class="hljs-string">'.3gp'</span>, <span class="hljs-string">'.pdf'</span>, <span class="hljs-string">'.doc'</span>, <span class="hljs-string">'.docx'</span>, <span class="hljs-string">'.epub'</span>, <span class="hljs-string">'.tar'</span>, <span class="hljs-string">'.zip'</span>, <span class="hljs-string">'.rar'</span>, <span class="hljs-string">'.mp3'</span>, <span class="hljs-string">'.wav'</span>, <span class="hljs-string">'.ogg'</span>, <span class="hljs-string">'.aac'</span>, <span class="hljs-string">'.txt'</span>, <span class="hljs-string">'.html'</span>, <span class="hljs-string">'.json'</span>, <span class="hljs-string">'.xml'</span>, <span class="hljs-string">'.gz'</span>, <span class="hljs-string">'.bz2'</span>, <span class="hljs-string">'.7z'</span>, <span class="hljs-string">'.iso'</span> ]<span class="hljs-comment">// The mimetypes for the extensions you want to allow</span> <span class="hljs-keyword">const</span> allowedMimeTypes = [ <span class="hljs-string">'image/jpeg'</span>, <span class="hljs-string">'image/png'</span>, <span class="hljs-string">'image/gif'</span>, <span class="hljs-string">'image/bmp'</span>, <span class="hljs-string">'image/tiff'</span>, <span class="hljs-string">'image/svg+xml'</span>, <span class="hljs-string">'video/mp4'</span>, <span class="hljs-string">'video/quicktime'</span>, <span class="hljs-string">'video/x-matroska'</span>, <span class="hljs-string">'video/avi'</span>, <span class="hljs-string">'video/webm'</span>, <span class="hljs-string">'video/3gpp'</span>, <span class="hljs-string">'application/pdf'</span>, <span class="hljs-string">'application/msword'</span>, <span class="hljs-string">'application/vnd.openxmlformats-officedocument.wordprocessingml.document'</span>, <span class="hljs-string">'application/epub+zip'</span>, <span class="hljs-string">'application/x-tar'</span>, <span class="hljs-string">'application/zip'</span>, <span class="hljs-string">'application/x-rar-compressed'</span>, <span class="hljs-string">'audio/mpeg'</span>, <span class="hljs-string">'audio/wav'</span>, <span class="hljs-string">'audio/ogg'</span>, <span class="hljs-string">'audio/aac'</span>, <span class="hljs-string">'text/plain'</span>, <span class="hljs-string">'text/html'</span>, <span class="hljs-string">'application/json'</span>, <span class="hljs-string">'application/xml'</span>, <span class="hljs-string">'application/gzip'</span>, <span class="hljs-string">'application/x-bzip2'</span>, <span class="hljs-string">'application/x-7z-compressed'</span>, <span class="hljs-string">'application/x-iso9660-image'</span> ]<span class="hljs-comment">// get the extension and mimetype of the file</span> <span class="hljs-keyword">const</span> extname = path.extname(file.originalname).toLowerCase() <span class="hljs-keyword">const</span> mimetype = file.mimetype;<span class="hljs-comment">// Check if the extname and mimetype is valid</span> <span class="hljs-keyword">const</span> isExtensionValid = allowedExtensions.includes(extname) <span class="hljs-keyword">const</span> isMimetypeValid = allowedMimeTypes.includes(mimetype)<span class="hljs-comment">// return callback if both are valid</span> <span class="hljs-keyword">if</span> (isExtensionValid &amp;&amp; isMimetypeValid) { <span class="hljs-keyword">return</span> cb(<span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>) } <span class="hljs-keyword">else</span> { <span class="hljs-keyword">return</span> cb(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Unsupported file type'</span>), <span class="hljs-literal">false</span>) }}</code></pre><p>So what's going on?</p><ul><li><p>Create an array for the <code>extensions</code> you want to allow</p></li><li><p>Create another array for the <code>mimetypes</code> you want to allow</p><p> why mimes? when we can check for .exe files in extensions?<br /> we will discuss this in the later part of this blog.</p></li><li><p>Get the extension of the file with the help of <code>path</code> module in <code>node.js</code>.<br /> <code>path</code> module helps in handling the path of the files<br /> eg. <code>dirname/filename.txt</code></p></li><li><p>Get the MIME of the file<br /> the file object contains this info which was discussed the the above part</p></li><li><p>Check weather the extname and mimetype of the file matches any values in the allowed extension and mime array.</p></li><li><p>If both are present return the callback to indicate weather it is to be accepted or rejected</p></li></ul><h3 id="heading-what-are-mimes-why-are-they-required">What are MIMES ? Why are they required?</h3><p>MIME (Multipurpose Internet Mail Extensions) are a standard way of identifying and handling the document based on the content in it. MIME types consist of a primary type and a sub-type, separated by a slash (e.g., <code>text/plain</code>, <code>application/pdf</code>, <code>video/mp4</code>).</p><p>Importance :</p><ul><li><p><strong>Accuracy</strong>: MIME types give a more accurate description of the file types than extensions.</p></li><li><p><strong>Security</strong>: Relying solely on file extensions is not sufficient for identifying file types because a file with a <code>.jpg</code> extension could actually be an executable or malware. MIME types provide an additional layer of identification by examining the file's content. However, MIME types alone are also not foolproof. It's important to use a combination of file extensions, MIME type checking, and content analysis to ensure accurate identification and to enhance security.</p><p> Like even if the file is exe it will be opened in acc to the mime and it will not be harmfull until the exe file is meant to be executed in image.</p></li><li><p><strong>Web and Network Protocols</strong>: MIME types are used in HTTP headers, email, and other network protocols to properly handle and display files. For example, a web server might send a file with <code>Content-Type: image/jpeg</code> to tell the browser that the file should be displayed as an image.<br /> Examples</p><ol><li><p><strong>Correct Handling</strong>:</p><ul><li><p><strong>File Extension</strong>: <code>.jpeg</code></p></li><li><p><strong>MIME Type</strong>: <code>image/jpeg</code></p></li><li><p><strong>Usage</strong>: The browser or application processes it as an image.</p></li></ul></li><li><p><strong>Potential Issue</strong>:</p><ul><li><p><strong>File Extension</strong>: <code>.jpeg</code></p></li><li><p><strong>MIME Type</strong>: <code>application/pdf</code> (incorrect)</p></li><li><p><strong>Usage</strong>: The application might try to open the file as a PDF, leading to errors or incorrect handling.</p></li></ul></li></ol></li></ul><h3 id="heading-limits">limits</h3><p>An object specifying the size limits of the following optional properties.</p><div class="hn-table"><table><thead><tr><td>Key</td><td>Description</td><td>Default</td></tr></thead><tbody><tr><td><code>fieldNameSize</code></td><td>Max field name size</td><td>100 bytes</td></tr><tr><td><code>fieldSize</code></td><td>Max field value size (in bytes)</td><td>1MB</td></tr><tr><td><code>fields</code></td><td>Max number of non-file fields</td><td>Infinity</td></tr><tr><td><code>fileSize</code></td><td>For multipart forms, the max file size (in bytes)</td><td>Infinity</td></tr><tr><td><code>files</code></td><td>For multipart forms, the max number of file fields</td><td>Infinity</td></tr><tr><td><code>parts</code></td><td>For multipart forms, the max number of parts (fields + files)</td><td>Infinity</td></tr><tr><td><code>headerPairs</code></td><td>For multipart forms, the max number of header key=&gt;value pairs to parse</td><td>2000</td></tr></tbody></table></div><pre><code class="lang-javascript">limits: { <span class="hljs-attr">fileSize</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span> }</code></pre><p>1 MB = 1024 * 1024 bytes<br />Therefore 50 MB is the size limit set for a file .</p><pre><code class="lang-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> upload = multer({ storage, fileFilter, <span class="hljs-attr">limits</span>: { <span class="hljs-attr">fileSize</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span> }})</code></pre><p>So this is how we can use multer to the fullest and elevate or backend applications.<br />I came to know this while I was building my personal project and thought it was worth sharing.</p><hr /><h3 id="heading-references">References</h3><p><a target="_blank" href="https://expressjs.com/en/resources/middleware/multer.html">Express Multer</a></p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others, and following me on <a target="_blank" href="https://x.com/AdityaVerm20240">Twitter</a> and <a target="_blank" href="http://www.linkedin.com/in/aditya-verma-6ab107308">LinkedIn</a>.</p><p>🥰 Thank You for reading.</p>]]></hashnode:content>
<hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1725807671212/ab43c548-c7db-4ba0-897a-a7378bb310c4.png</hashnode:coverImage>
</item>
<item>
<title>
<![CDATA[ ShareHub Data Model ]]>
</title>
<description>
<![CDATA[ Overview ShareHub is a full stack web application designed to allow users to upload, organize, and share various types of files (photos, videos, documents, etc.). Users can create instances, group files within these instances, and share access with o... ]]>
</description>
<link>https://adityabverma.hashnode.dev/sharehub-data-model</link>
<guid isPermaLink="true">https://adityabverma.hashnode.dev/sharehub-data-model</guid>
<category>
<![CDATA[ Databases ]]>
</category>
<category>
<![CDATA[ data-modeling ]]>
</category>
<category>
<![CDATA[ MongoDB ]]>
</category>
<category>
<![CDATA[ Programming Blogs ]]>
</category>
<category>
<![CDATA[ projects ]]>
</category>
<category>
<![CDATA[ database design ]]>
</category>
<dc:creator>
<![CDATA[ Aditya Verma ]]>
</dc:creator>
<pubDate>Tue, 09 Jul 2024 16:41:21 GMT</pubDate>
<content:encoded><![CDATA[<h2 id="heading-overview">Overview</h2><p>ShareHub is a full stack web application designed to allow users to upload, organize, and share various types of files (photos, videos, documents, etc.). Users can create instances, group files within these instances, and share access with others. This document provides an overview of the data model used in ShareHub.</p><p><a target="_blank" href="https://app.eraser.io/workspace/3YZ61hGbriG3jSPyq5T5?origin=share"><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1720542965990/c0738dee-20d9-4336-bcfc-491ef22dedf8.png" alt class="image--center mx-auto" /></a></p><h2 id="heading-data-entities">Data Entities</h2><h3 id="heading-users">Users</h3><p><strong>Collection Name:</strong><code>users</code><br /><strong>Description:</strong> Stores information about each user in the system.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the user</td></tr><tr><td><code>username</code></td><td><code>string</code></td><td>User's unique username</td></tr><tr><td><code>email</code></td><td><code>string</code></td><td>User's email address</td></tr><tr><td><code>fullname</code></td><td><code>string</code></td><td>User's full name</td></tr><tr><td><code>instances</code></td><td><code>ObjectId[]</code></td><td>References to instances owned by the user</td></tr><tr><td><code>avatar</code></td><td><code>url</code></td><td>URL of the user's avatar</td></tr><tr><td><code>avatar_public_id</code></td><td><code>string</code></td><td>Public ID for the avatar in Cloudinary</td></tr><tr><td><code>coverImage</code></td><td><code>url</code></td><td>URL of the user's cover image</td></tr><tr><td><code>coverImage_public_id</code></td><td><code>string</code></td><td>Public ID for the cover image in Cloudinary</td></tr><tr><td><code>password</code></td><td><code>string</code></td><td>User's password (hashed)</td></tr><tr><td><code>refreshToken</code></td><td><code>string</code></td><td>Token for refreshing authentication</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the user was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-instances">Instances</h3><p><strong>Collection Name:</strong><code>instances</code><br /><strong>Description:</strong> Represents a collection of groups and files created by a user.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the instance</td></tr><tr><td><code>title</code></td><td><code>string</code></td><td>Title of the instance</td></tr><tr><td><code>password</code></td><td><code>string</code></td><td>Password for accessing the instance</td></tr><tr><td><code>group</code></td><td><code>ObjectId[]</code></td><td>References to groups within the instance</td></tr><tr><td><code>owner</code></td><td><code>ObjectId</code></td><td>References the user who owns the instance</td></tr><tr><td><code>description</code></td><td><code>string</code></td><td>Description of the instance</td></tr><tr><td><code>comments</code></td><td><code>ObjectId[]</code></td><td>References to comments within the instance</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the instance was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-groups">Groups</h3><p><strong>Collection Name:</strong><code>groups</code><br /><strong>Description:</strong> Organizes files within an instance into categories.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the group</td></tr><tr><td><code>name</code></td><td><code>string</code></td><td>Name of the group</td></tr><tr><td><code>videofiles</code></td><td><code>ObjectId[]</code></td><td>References to video files in the group</td></tr><tr><td><code>docfiles</code></td><td><code>ObjectId[]</code></td><td>References to document files in the group</td></tr><tr><td><code>imagefiles</code></td><td><code>ObjectId[]</code></td><td>References to image files in the group</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the group was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-comments">Comments</h3><p><strong>Collection Name:</strong><code>comments</code><br /><strong>Description:</strong> Stores comments made by users on instances.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the comment</td></tr><tr><td><code>content</code></td><td><code>string</code></td><td>Content of the comment</td></tr><tr><td><code>owner</code></td><td><code>ObjectId</code></td><td>References the user who made the comment</td></tr><tr><td><code>instanceId</code></td><td><code>ObjectId</code></td><td>References the instance the comment belongs to</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the comment was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-videos">Videos</h3><p><strong>Collection Name:</strong><code>videos</code><br /><strong>Description:</strong> Stores information about video files.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the video</td></tr><tr><td><code>owner</code></td><td><code>ObjectId</code></td><td>References the user who owns the video</td></tr><tr><td><code>group</code></td><td><code>ObjectId</code></td><td>References the group the video belongs to</td></tr><tr><td><code>title</code></td><td><code>string</code></td><td>Title of the video</td></tr><tr><td><code>videofile</code></td><td><code>url</code></td><td>URL of the video file</td></tr><tr><td><code>videofile_public_id</code></td><td><code>string</code></td><td>Public ID for the video file in Cloudinary</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the video was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-documents">Documents</h3><p><strong>Collection Name:</strong><code>docs</code><br /><strong>Description:</strong> Stores information about document files.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the document</td></tr><tr><td><code>owner</code></td><td><code>ObjectId</code></td><td>References the user who owns the document</td></tr><tr><td><code>group</code></td><td><code>ObjectId</code></td><td>References the group the document belongs to</td></tr><tr><td><code>title</code></td><td><code>string</code></td><td>Title of the document</td></tr><tr><td><code>docfile</code></td><td><code>url</code></td><td>URL of the document file</td></tr><tr><td><code>docfile_public_id</code></td><td><code>string</code></td><td>Public ID for the document file in Cloudinary</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the document was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-images">Images</h3><p><strong>Collection Name:</strong><code>images</code><br /><strong>Description:</strong> Stores information about image files.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the image</td></tr><tr><td><code>owner</code></td><td><code>ObjectId</code></td><td>References the user who owns the image</td></tr><tr><td><code>group</code></td><td><code>ObjectId</code></td><td>References the group the image belongs to</td></tr><tr><td><code>title</code></td><td><code>string</code></td><td>Title of the image</td></tr><tr><td><code>imagefile</code></td><td><code>url</code></td><td>URL of the image file</td></tr><tr><td><code>imagefile_public_id</code></td><td><code>string</code></td><td>Public ID for the image file in Cloudinary</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the image was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h2 id="heading-relationships">Relationships</h2><ul><li><p><strong>Users to Instances</strong>: A user can own multiple instances.</p><ul><li><code>users.instances</code> references <a target="_blank" href="http://instances.id"><code>instances.id</code></a></li></ul></li><li><p><strong>Instances to Groups</strong>: An instance can contain multiple groups.</p><ul><li><a target="_blank" href="http://instances.group"><code>instances.group</code></a> references <a target="_blank" href="http://groups.id"><code>groups.id</code></a></li></ul></li><li><p><strong>Instances to Users</strong>: An instance is owned by a user.</p><ul><li><code>instances.owner</code> references <a target="_blank" href="http://users.id"><code>users.id</code></a></li></ul></li><li><p><strong>Groups to Videos</strong>: A group can contain multiple video files.</p><ul><li><code>groups.videofiles</code> references <a target="_blank" href="http://videos.id"><code>videos.id</code></a></li></ul></li><li><p><strong>Groups to Documents</strong>: A group can contain multiple document files.</p><ul><li><code>groups.docfiles</code> references <a target="_blank" href="http://docs.id"><code>docs.id</code></a></li></ul></li><li><p><strong>Groups to Images</strong>: A group can contain multiple image files.</p><ul><li><code>groups.imagefiles</code> references <a target="_blank" href="http://images.id"><code>images.id</code></a></li></ul></li><li><p><strong>Videos to Users</strong>: A video file is owned by a user.</p><ul><li><code>videos.owner</code> references <a target="_blank" href="http://users.id"><code>users.id</code></a></li></ul></li><li><p><strong>Documents to Users</strong>: A document file is owned by a user.</p><ul><li><code>docs.owner</code> references <a target="_blank" href="http://users.id"><code>users.id</code></a></li></ul></li><li><p><strong>Images to Users</strong>: An image file is owned by a user.</p><ul><li><code>images.owner</code> references <a target="_blank" href="http://users.id"><code>users.id</code></a></li></ul></li><li><p><strong>Comments to Users</strong>: A comment is made by a user.</p><ul><li><code>comments.owner</code> references <a target="_blank" href="http://users.id"><code>users.id</code></a></li></ul></li><li><p><strong>Comments to Instances</strong>: A comment belongs to an instance.</p><ul><li><code>comments.instanceId</code> references <a target="_blank" href="http://instances.id"><code>instances.id</code></a></li></ul></li><li><p><strong>Instances to Comments</strong>: An instance can have multiple comments.</p><ul><li><code>instances.comments</code> references <a target="_blank" href="http://comments.id"><code>comments.id</code></a></li></ul></li></ul><h2 id="heading-key-points">Key Points</h2><ol><li><p><strong>User Instances</strong>: A user can have multiple instances.</p></li><li><p><strong>Instance Groups</strong>: Each instance can have multiple groups.</p></li><li><p><strong>Group Files</strong>: Each group can store different types of files such as videos, documents, and images.</p></li><li><p><strong>Instance Comments</strong>: Users can comment on instances.</p></li></ol><hr /><h3 id="heading-references">References</h3><p><a target="_blank" href="https://app.eraser.io/workspace/3YZ61hGbriG3jSPyq5T5?origin=share"><mark>Eraser.io data model</mark></a></p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others.</p><p>🥰 Thank You for reading.</p>]]></content:encoded>
<hashnode:content><![CDATA[<h2 id="heading-overview">Overview</h2><p>ShareHub is a full stack web application designed to allow users to upload, organize, and share various types of files (photos, videos, documents, etc.). Users can create instances, group files within these instances, and share access with others. This document provides an overview of the data model used in ShareHub.</p><p><a target="_blank" href="https://app.eraser.io/workspace/3YZ61hGbriG3jSPyq5T5?origin=share"><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1720542965990/c0738dee-20d9-4336-bcfc-491ef22dedf8.png" alt class="image--center mx-auto" /></a></p><h2 id="heading-data-entities">Data Entities</h2><h3 id="heading-users">Users</h3><p><strong>Collection Name:</strong><code>users</code><br /><strong>Description:</strong> Stores information about each user in the system.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the user</td></tr><tr><td><code>username</code></td><td><code>string</code></td><td>User's unique username</td></tr><tr><td><code>email</code></td><td><code>string</code></td><td>User's email address</td></tr><tr><td><code>fullname</code></td><td><code>string</code></td><td>User's full name</td></tr><tr><td><code>instances</code></td><td><code>ObjectId[]</code></td><td>References to instances owned by the user</td></tr><tr><td><code>avatar</code></td><td><code>url</code></td><td>URL of the user's avatar</td></tr><tr><td><code>avatar_public_id</code></td><td><code>string</code></td><td>Public ID for the avatar in Cloudinary</td></tr><tr><td><code>coverImage</code></td><td><code>url</code></td><td>URL of the user's cover image</td></tr><tr><td><code>coverImage_public_id</code></td><td><code>string</code></td><td>Public ID for the cover image in Cloudinary</td></tr><tr><td><code>password</code></td><td><code>string</code></td><td>User's password (hashed)</td></tr><tr><td><code>refreshToken</code></td><td><code>string</code></td><td>Token for refreshing authentication</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the user was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-instances">Instances</h3><p><strong>Collection Name:</strong><code>instances</code><br /><strong>Description:</strong> Represents a collection of groups and files created by a user.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the instance</td></tr><tr><td><code>title</code></td><td><code>string</code></td><td>Title of the instance</td></tr><tr><td><code>password</code></td><td><code>string</code></td><td>Password for accessing the instance</td></tr><tr><td><code>group</code></td><td><code>ObjectId[]</code></td><td>References to groups within the instance</td></tr><tr><td><code>owner</code></td><td><code>ObjectId</code></td><td>References the user who owns the instance</td></tr><tr><td><code>description</code></td><td><code>string</code></td><td>Description of the instance</td></tr><tr><td><code>comments</code></td><td><code>ObjectId[]</code></td><td>References to comments within the instance</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the instance was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-groups">Groups</h3><p><strong>Collection Name:</strong><code>groups</code><br /><strong>Description:</strong> Organizes files within an instance into categories.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the group</td></tr><tr><td><code>name</code></td><td><code>string</code></td><td>Name of the group</td></tr><tr><td><code>videofiles</code></td><td><code>ObjectId[]</code></td><td>References to video files in the group</td></tr><tr><td><code>docfiles</code></td><td><code>ObjectId[]</code></td><td>References to document files in the group</td></tr><tr><td><code>imagefiles</code></td><td><code>ObjectId[]</code></td><td>References to image files in the group</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the group was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-comments">Comments</h3><p><strong>Collection Name:</strong><code>comments</code><br /><strong>Description:</strong> Stores comments made by users on instances.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the comment</td></tr><tr><td><code>content</code></td><td><code>string</code></td><td>Content of the comment</td></tr><tr><td><code>owner</code></td><td><code>ObjectId</code></td><td>References the user who made the comment</td></tr><tr><td><code>instanceId</code></td><td><code>ObjectId</code></td><td>References the instance the comment belongs to</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the comment was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-videos">Videos</h3><p><strong>Collection Name:</strong><code>videos</code><br /><strong>Description:</strong> Stores information about video files.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the video</td></tr><tr><td><code>owner</code></td><td><code>ObjectId</code></td><td>References the user who owns the video</td></tr><tr><td><code>group</code></td><td><code>ObjectId</code></td><td>References the group the video belongs to</td></tr><tr><td><code>title</code></td><td><code>string</code></td><td>Title of the video</td></tr><tr><td><code>videofile</code></td><td><code>url</code></td><td>URL of the video file</td></tr><tr><td><code>videofile_public_id</code></td><td><code>string</code></td><td>Public ID for the video file in Cloudinary</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the video was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-documents">Documents</h3><p><strong>Collection Name:</strong><code>docs</code><br /><strong>Description:</strong> Stores information about document files.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the document</td></tr><tr><td><code>owner</code></td><td><code>ObjectId</code></td><td>References the user who owns the document</td></tr><tr><td><code>group</code></td><td><code>ObjectId</code></td><td>References the group the document belongs to</td></tr><tr><td><code>title</code></td><td><code>string</code></td><td>Title of the document</td></tr><tr><td><code>docfile</code></td><td><code>url</code></td><td>URL of the document file</td></tr><tr><td><code>docfile_public_id</code></td><td><code>string</code></td><td>Public ID for the document file in Cloudinary</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the document was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h3 id="heading-images">Images</h3><p><strong>Collection Name:</strong><code>images</code><br /><strong>Description:</strong> Stores information about image files.</p><div class="hn-table"><table><thead><tr><td>Field</td><td>Type</td><td>Description</td></tr></thead><tbody><tr><td><code>id</code></td><td><code>string</code></td><td>Primary key, unique identifier for the image</td></tr><tr><td><code>owner</code></td><td><code>ObjectId</code></td><td>References the user who owns the image</td></tr><tr><td><code>group</code></td><td><code>ObjectId</code></td><td>References the group the image belongs to</td></tr><tr><td><code>title</code></td><td><code>string</code></td><td>Title of the image</td></tr><tr><td><code>imagefile</code></td><td><code>url</code></td><td>URL of the image file</td></tr><tr><td><code>imagefile_public_id</code></td><td><code>string</code></td><td>Public ID for the image file in Cloudinary</td></tr><tr><td><code>createdAt</code></td><td><code>Date</code></td><td>Timestamp of when the image was created</td></tr><tr><td><code>updatedAt</code></td><td><code>Date</code></td><td>Timestamp of the last update</td></tr></tbody></table></div><h2 id="heading-relationships">Relationships</h2><ul><li><p><strong>Users to Instances</strong>: A user can own multiple instances.</p><ul><li><code>users.instances</code> references <a target="_blank" href="http://instances.id"><code>instances.id</code></a></li></ul></li><li><p><strong>Instances to Groups</strong>: An instance can contain multiple groups.</p><ul><li><a target="_blank" href="http://instances.group"><code>instances.group</code></a> references <a target="_blank" href="http://groups.id"><code>groups.id</code></a></li></ul></li><li><p><strong>Instances to Users</strong>: An instance is owned by a user.</p><ul><li><code>instances.owner</code> references <a target="_blank" href="http://users.id"><code>users.id</code></a></li></ul></li><li><p><strong>Groups to Videos</strong>: A group can contain multiple video files.</p><ul><li><code>groups.videofiles</code> references <a target="_blank" href="http://videos.id"><code>videos.id</code></a></li></ul></li><li><p><strong>Groups to Documents</strong>: A group can contain multiple document files.</p><ul><li><code>groups.docfiles</code> references <a target="_blank" href="http://docs.id"><code>docs.id</code></a></li></ul></li><li><p><strong>Groups to Images</strong>: A group can contain multiple image files.</p><ul><li><code>groups.imagefiles</code> references <a target="_blank" href="http://images.id"><code>images.id</code></a></li></ul></li><li><p><strong>Videos to Users</strong>: A video file is owned by a user.</p><ul><li><code>videos.owner</code> references <a target="_blank" href="http://users.id"><code>users.id</code></a></li></ul></li><li><p><strong>Documents to Users</strong>: A document file is owned by a user.</p><ul><li><code>docs.owner</code> references <a target="_blank" href="http://users.id"><code>users.id</code></a></li></ul></li><li><p><strong>Images to Users</strong>: An image file is owned by a user.</p><ul><li><code>images.owner</code> references <a target="_blank" href="http://users.id"><code>users.id</code></a></li></ul></li><li><p><strong>Comments to Users</strong>: A comment is made by a user.</p><ul><li><code>comments.owner</code> references <a target="_blank" href="http://users.id"><code>users.id</code></a></li></ul></li><li><p><strong>Comments to Instances</strong>: A comment belongs to an instance.</p><ul><li><code>comments.instanceId</code> references <a target="_blank" href="http://instances.id"><code>instances.id</code></a></li></ul></li><li><p><strong>Instances to Comments</strong>: An instance can have multiple comments.</p><ul><li><code>instances.comments</code> references <a target="_blank" href="http://comments.id"><code>comments.id</code></a></li></ul></li></ul><h2 id="heading-key-points">Key Points</h2><ol><li><p><strong>User Instances</strong>: A user can have multiple instances.</p></li><li><p><strong>Instance Groups</strong>: Each instance can have multiple groups.</p></li><li><p><strong>Group Files</strong>: Each group can store different types of files such as videos, documents, and images.</p></li><li><p><strong>Instance Comments</strong>: Users can comment on instances.</p></li></ol><hr /><h3 id="heading-references">References</h3><p><a target="_blank" href="https://app.eraser.io/workspace/3YZ61hGbriG3jSPyq5T5?origin=share"><mark>Eraser.io data model</mark></a></p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others.</p><p>🥰 Thank You for reading.</p>]]></hashnode:content>
<hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1722403857152/10bdf5cc-5adc-4fdf-b347-c8aa702e093b.jpeg</hashnode:coverImage>
</item>
<item>
<title>
<![CDATA[ Getting started with LavinMQ & CloudAMPQ ]]>
</title>
<description>
<![CDATA[ In this blog post, we will dive into a hands-on practical guide to using LavinMQ, an open-source message broker service. Whether you're a seasoned developer looking to explore new messaging solutions or a newcomer to the world of message brokers, thi... ]]>
</description>
<link>https://adityabverma.hashnode.dev/getting-started-with-lavinmq-cloudampq</link>
<guid isPermaLink="true">https://adityabverma.hashnode.dev/getting-started-with-lavinmq-cloudampq</guid>
<category>
<![CDATA[ #LavinMQ ]]>
</category>
<category>
<![CDATA[ #CloudAMQP ]]>
</category>
<category>
<![CDATA[ mlh ]]>
</category>
<category>
<![CDATA[ message queue ]]>
</category>
<category>
<![CDATA[ message broker ]]>
</category>
<dc:creator>
<![CDATA[ Aditya Verma ]]>
</dc:creator>
<pubDate>Sun, 12 May 2024 17:46:51 GMT</pubDate>
<content:encoded><![CDATA[<p>In this blog post, we will dive into a hands-on practical guide to using LavinMQ, an open-source message broker service. Whether you're a seasoned developer looking to explore new messaging solutions or a newcomer to the world of message brokers, this tutorial will provide you with step-by-step instructions to get started.</p><p>First, we'll cover the basics of what a message broker is and why it's an essential component in modern distributed systems. Then, we will sign up for CloudAMQP and create a LavinMQ instance.</p><p>Once we have our LavinMQ instance set up, we'll dive into writing some code in Node.js to set up a Producer-Consumer architecture.</p><p>For those who prefer working with other programming languages, fret not! We'll also provide links to code examples in Python, Java, and Go, so you can implement the same architecture in your language of choice.</p><p>By the end of this tutorial, you'll not only have a solid understanding of how to use LavinMQ but also have a working implementation of a message-based architecture that you can extend and adapt to your specific use cases.</p><p>So, let's dive in and start exploring the exciting world of LavinMQ together!</p><h3 id="heading-what-is-a-message-broker-service">What is a message broker service?</h3><p>A message broker service is a software that helps applications, services and system to contact each other and exchange information.</p><p>LavinMQ being a message queue software also called as message brokers, publishes a message by sending a service called Producer, via the broker, to the consuming server called Consumer.</p><p><a target="_blank" href="https://lavinmq.com/documentation/message-routing?utm_source=mlh.com&amp;utm_medium=referral&amp;utm_campaign=Hackathon2024"><img src="https://lavinmq.com/img/docs/lavinmq-messaging-architecture.jpg" alt /></a></p><h3 id="heading-sign-up-for-cloudamqp-and-create-a-lavinmq-instance">Sign up for CloudAMQP and create a LavinMQ instance.</h3><p>S1. Sign up for CloudAMQP</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1715533201021/4252745d-2875-4c83-89d0-e2387ca1399b.png" alt class="image--center mx-auto" /></p><p>S2. Create a new instance</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1715533305480/bc7e695e-1129-41fe-8e9c-ffc4e028a355.png" alt class="image--center mx-auto" /></p><p>Name: &lt;name of your instance&gt;</p><p>then click select region</p><p>Platform: Azure</p><p>Region: East US 2</p><p>click on review and then create instance</p><h3 id="heading-coding-part">Coding Part</h3><h2 id="heading-installation">Installation</h2><ol><li><p>Clone the repository:</p><p> (you can use the sample <a target="_blank" href="https://lavinmq.com/documentation/nodejs-sample-code">node.js code</a> provided by LavimMQ)</p><pre><code class="lang-bash"> git <span class="hljs-built_in">clone</span> https://github.com/AdityaBVerma/LavinMQ</code></pre></li><li><p>Install dependencies for both producer and consumer:</p><pre><code class="lang-bash"> npm install</code></pre></li><li><p>Set up environment variables:</p><p> Create a <code>.env</code> file with the following content:</p><pre><code class="lang-bash"> CLOUDAMQP_URL=&lt;your_cloudamqp_url&gt;</code></pre><p> Replace <code>&lt;your_cloudamqp_url&gt;</code> with your CloudAMQP URL.</p></li><li><p>Create Producer.js and Consumer.js</p><pre><code class="lang-bash"> touch Producer.js</code></pre><pre><code class="lang-bash"> touch Consumer.js</code></pre></li></ol><h2 id="heading-usage">Usage</h2><h3 id="heading-producer">Producer</h3><p>To run the producer:</p><ol start="2"><li><p>Run the producer script:</p><pre><code class="lang-bash"> node Producer.js</code></pre></li></ol><p>The producer will connect to the RabbitMQ server specified in the environment variables, send messages to the queue, and then exit after a specified timeout.</p><h3 id="heading-consumer">Consumer</h3><ol start="2"><li><p>Run the consumer script:</p><pre><code class="lang-bash"> node Consumer.js</code></pre></li></ol><p>The consumer will connect to the RabbitMQ server, listen for messages in the queue, process them, and acknowledge them after processing.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1715535119777/6d0274cc-0148-4559-8735-577bc2efb96f.png" alt class="image--center mx-auto" /></p><ul><li><p><a target="_blank" href="https://lavinmq.com/documentation/introduction-python?utm_source=mlh.com&amp;utm_medium=referral&amp;utm_campaign=Hackathon2024">Python Code</a></p></li><li><p><a target="_blank" href="https://lavinmq.com/documentation/nodejs-sample-code">Node.js</a></p></li></ul><hr /><h3 id="heading-references">References</h3><p><a target="_blank" href="https://lavinmq.com/documentation/nodejs-sample-code">LavinMQ sample node.js code</a></p><p><a target="_blank" href="https://lavinmq.com/documentation/message-routing?utm_source=mlh.com&amp;utm_medium=referral&amp;utm_campaign=Hackathon2024">MHL challenge for message routing in LavinMQ</a></p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others.</p><p>🥰 Thank You for reading.</p>]]></content:encoded>
<hashnode:content><![CDATA[<p>In this blog post, we will dive into a hands-on practical guide to using LavinMQ, an open-source message broker service. Whether you're a seasoned developer looking to explore new messaging solutions or a newcomer to the world of message brokers, this tutorial will provide you with step-by-step instructions to get started.</p><p>First, we'll cover the basics of what a message broker is and why it's an essential component in modern distributed systems. Then, we will sign up for CloudAMQP and create a LavinMQ instance.</p><p>Once we have our LavinMQ instance set up, we'll dive into writing some code in Node.js to set up a Producer-Consumer architecture.</p><p>For those who prefer working with other programming languages, fret not! We'll also provide links to code examples in Python, Java, and Go, so you can implement the same architecture in your language of choice.</p><p>By the end of this tutorial, you'll not only have a solid understanding of how to use LavinMQ but also have a working implementation of a message-based architecture that you can extend and adapt to your specific use cases.</p><p>So, let's dive in and start exploring the exciting world of LavinMQ together!</p><h3 id="heading-what-is-a-message-broker-service">What is a message broker service?</h3><p>A message broker service is a software that helps applications, services and system to contact each other and exchange information.</p><p>LavinMQ being a message queue software also called as message brokers, publishes a message by sending a service called Producer, via the broker, to the consuming server called Consumer.</p><p><a target="_blank" href="https://lavinmq.com/documentation/message-routing?utm_source=mlh.com&amp;utm_medium=referral&amp;utm_campaign=Hackathon2024"><img src="https://lavinmq.com/img/docs/lavinmq-messaging-architecture.jpg" alt /></a></p><h3 id="heading-sign-up-for-cloudamqp-and-create-a-lavinmq-instance">Sign up for CloudAMQP and create a LavinMQ instance.</h3><p>S1. Sign up for CloudAMQP</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1715533201021/4252745d-2875-4c83-89d0-e2387ca1399b.png" alt class="image--center mx-auto" /></p><p>S2. Create a new instance</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1715533305480/bc7e695e-1129-41fe-8e9c-ffc4e028a355.png" alt class="image--center mx-auto" /></p><p>Name: &lt;name of your instance&gt;</p><p>then click select region</p><p>Platform: Azure</p><p>Region: East US 2</p><p>click on review and then create instance</p><h3 id="heading-coding-part">Coding Part</h3><h2 id="heading-installation">Installation</h2><ol><li><p>Clone the repository:</p><p> (you can use the sample <a target="_blank" href="https://lavinmq.com/documentation/nodejs-sample-code">node.js code</a> provided by LavimMQ)</p><pre><code class="lang-bash"> git <span class="hljs-built_in">clone</span> https://github.com/AdityaBVerma/LavinMQ</code></pre></li><li><p>Install dependencies for both producer and consumer:</p><pre><code class="lang-bash"> npm install</code></pre></li><li><p>Set up environment variables:</p><p> Create a <code>.env</code> file with the following content:</p><pre><code class="lang-bash"> CLOUDAMQP_URL=&lt;your_cloudamqp_url&gt;</code></pre><p> Replace <code>&lt;your_cloudamqp_url&gt;</code> with your CloudAMQP URL.</p></li><li><p>Create Producer.js and Consumer.js</p><pre><code class="lang-bash"> touch Producer.js</code></pre><pre><code class="lang-bash"> touch Consumer.js</code></pre></li></ol><h2 id="heading-usage">Usage</h2><h3 id="heading-producer">Producer</h3><p>To run the producer:</p><ol start="2"><li><p>Run the producer script:</p><pre><code class="lang-bash"> node Producer.js</code></pre></li></ol><p>The producer will connect to the RabbitMQ server specified in the environment variables, send messages to the queue, and then exit after a specified timeout.</p><h3 id="heading-consumer">Consumer</h3><ol start="2"><li><p>Run the consumer script:</p><pre><code class="lang-bash"> node Consumer.js</code></pre></li></ol><p>The consumer will connect to the RabbitMQ server, listen for messages in the queue, process them, and acknowledge them after processing.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1715535119777/6d0274cc-0148-4559-8735-577bc2efb96f.png" alt class="image--center mx-auto" /></p><ul><li><p><a target="_blank" href="https://lavinmq.com/documentation/introduction-python?utm_source=mlh.com&amp;utm_medium=referral&amp;utm_campaign=Hackathon2024">Python Code</a></p></li><li><p><a target="_blank" href="https://lavinmq.com/documentation/nodejs-sample-code">Node.js</a></p></li></ul><hr /><h3 id="heading-references">References</h3><p><a target="_blank" href="https://lavinmq.com/documentation/nodejs-sample-code">LavinMQ sample node.js code</a></p><p><a target="_blank" href="https://lavinmq.com/documentation/message-routing?utm_source=mlh.com&amp;utm_medium=referral&amp;utm_campaign=Hackathon2024">MHL challenge for message routing in LavinMQ</a></p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others.</p><p>🥰 Thank You for reading.</p>]]></hashnode:content>
<hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1715535500904/10500588-b21e-4f3d-a70b-5fe15d076e73.jpeg</hashnode:coverImage>
</item>
<item>
<title>
<![CDATA[ Prototypes in JavaScript: Exploring Prototypal Inheritance ]]>
</title>
<description>
<![CDATA[ Introduction: JavaScript is a versatile and powerful language, known for its unique object-oriented programming model based on prototypes. Understanding prototypes and prototypal inheritance is crucial for every JavaScript developer, as it forms the ... ]]>
</description>
<link>https://adityabverma.hashnode.dev/prototypes-in-javascript-exploring-prototypal-inheritance</link>
<guid isPermaLink="true">https://adityabverma.hashnode.dev/prototypes-in-javascript-exploring-prototypal-inheritance</guid>
<category>
<![CDATA[ prototype ]]>
</category>
<category>
<![CDATA[ prototypal inheritance ]]>
</category>
<category>
<![CDATA[ JavaScript ]]>
</category>
<category>
<![CDATA[ Object Oriented Programming ]]>
</category>
<category>
<![CDATA[ learning ]]>
</category>
<dc:creator>
<![CDATA[ Aditya Verma ]]>
</dc:creator>
<pubDate>Tue, 12 Mar 2024 18:38:29 GMT</pubDate>
<content:encoded><![CDATA[<h3 id="heading-introduction">Introduction:</h3><p>JavaScript is a versatile and powerful language, known for its unique object-oriented programming model based on prototypes. Understanding prototypes and prototypal inheritance is crucial for every JavaScript developer, as it forms the foundation of how objects work in the language.</p><p>In this blog, we will dive deep into prototypes and prototypal inheritance in JavaScript. We'll explore how prototypes allow us to use built-in functions and properties, how we can add our own properties to objects using prototypes, and how prototypal inheritance enables objects to inherit properties from other objects. We'll also compare prototypal inheritance with classical inheritance and discuss its practical applications in building scalable and reusable code.</p><p>Whether you're new to JavaScript or looking to deepen your understanding of its core concepts, this blog will provide you with valuable insights into how prototypes and prototypal inheritance work in JavaScript.</p><h3 id="heading-what-is-this-prototype">What is this Prototype?</h3><p>While working with JavaScript we all might have encountered something like this.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710256132246/207b6ddd-dd4b-454b-82ed-40a9bf5ad92b.png" alt class="image--center mx-auto" /></p><p>We all have used many inbuilt functions while using Arrays, Functions, Objects or Strings. Now these functions are not defined by us but how can we use them?</p><p>The answer to this question is <code>Prototype</code> . Prototype helps us to use these functions in our code. When we create an object/array/function/string/etc. the JavaScript engine attaches an object of these functions or properties with our object hence we can use these properties</p><p>To test this :</p><pre><code class="lang-javascript"><span class="hljs-comment">/**** in the console *** create an array */</span><span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">"Apple"</span>, <span class="hljs-string">"Banana"</span>, <span class="hljs-string">"Mango"</span>]<span class="hljs-comment">/* now we can use the hidden properties like find(), filter(), sort() with the array fruits*/</span>fruits.__proto__<span class="hljs-comment">// this will log all the properties with the array fruits</span></code></pre><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710258716724/620ce2d0-b40d-494f-a441-a5b24eb89544.png" alt class="image--center mx-auto" /></p><p>Similarly this can be done for String, functions, Objects as well.</p><p>As we get an object of Properties we will have another object of properties for this returned object which is the base Object</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710258949976/7d2e76ab-ce7a-42b7-8695-5bcddfdd6a44.png" alt class="image--center mx-auto" /></p><h3 id="heading-how-can-we-add-our-own-properties">How can we add our own properties ?</h3><pre><code class="lang-javascript"><span class="hljs-comment">// code snippets for IDE </span><span class="hljs-keyword">const</span> students = [<span class="hljs-string">"Aditya"</span>, <span class="hljs-string">"Jhon"</span>, <span class="hljs-string">"Philips"</span>]<span class="hljs-comment">// We create a new property named hi in Array</span><span class="hljs-built_in">Array</span>.prototype.hi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log( <span class="hljs-string">`hi <span class="hljs-subst">${<span class="hljs-built_in">this</span>}</span>`</span>)}students.hi()<span class="hljs-comment">// This function can be used for any other array too</span><span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">"Apple"</span>, <span class="hljs-string">"Banana"</span>, <span class="hljs-string">"Mango"</span>]fruits.hi()<span class="hljs-keyword">const</span> num = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]num.hi()</code></pre><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710260150280/b800556e-ec91-406c-884d-9099e9653e08.png" alt class="image--center mx-auto" /></p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710260371993/3fa870ee-cff0-49a6-ba9f-9d3787c5846c.png" alt class="image--center mx-auto" /></p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710262224533/95f6a0d9-1c3b-4194-b7cd-be96f43512aa.png" alt class="image--center mx-auto" /></p><p>Here in this example we create a function named hi in Array using <code>prototype</code> which console logs the output.</p><p>Once the Prototype function is created it can be applied to all Arrays as every array will now have a property named hi in the Prototype object. This can be seen in the above pictures how the hi property can be used with 'num' array and 'fruits' array.</p><h3 id="heading-prototypal-inheritance">Prototypal Inheritance:</h3><p>We saw above how to add our own properties in the prototypes.</p><p>However when we create a property in object it can also be used on the arrays this behaviour is due to the Prototypal Inheritance.</p><p>Prototypal Inheritance is the fundamental property in JavaScript in which an object inherits the methods from another object ( parent ) till it reaches null.</p><pre><code class="lang-javascript"><span class="hljs-comment">// creating a property in object</span><span class="hljs-built_in">Object</span>.prototype.hello = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log( <span class="hljs-string">`hello <span class="hljs-subst">${<span class="hljs-built_in">this</span>}</span>`</span>)}num.hello()fruits.hello()students.hello()</code></pre><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710261159254/852db869-f2c7-4622-b53f-32f63a085d53.png" alt class="image--center mx-auto" /></p><p>Here the <code>hello()</code> method is inherited from the Object's Prototype which was in the Array's Prototype.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710262253500/4afb9aef-fca4-427e-848f-6fc85f6653a5.png" alt class="image--center mx-auto" /></p><h3 id="heading-hierarchy">Hierarchy :</h3><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710263576108/ca7ec139-6b3b-4663-8a28-a488a3452d14.png" alt class="image--center mx-auto" /></p><p>The properties created in the Array cannot be used on Strings, Functions and Objects. Similarly properties created in the String cannot be used on Arrays, Functions and Objects. And for functions too the properties created in the Functions cannot be used on Strings, Arrays and Objects.</p><p>But the properties created in the Object can be used on the Arrays, Functions and Strings as well.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710263262836/996d4025-c3b4-420a-93de-4669952d1dc3.png" alt class="image--center mx-auto" /></p><h3 id="heading-inheritance">Inheritance :</h3><pre><code class="lang-javascript"><span class="hljs-keyword">const</span> specification = { <span class="hljs-attr">RAM</span> : <span class="hljs-number">8</span>, <span class="hljs-attr">weight</span>: <span class="hljs-number">180</span>, <span class="hljs-attr">camera</span>: <span class="hljs-literal">true</span>}<span class="hljs-keyword">const</span> phone = { <span class="hljs-attr">madeIn</span>: <span class="hljs-string">"India"</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">"touchscreen"</span>, <span class="hljs-attr">__proto__</span> : specification }<span class="hljs-comment">/* making refrence to properties of specification now phone has properties of specification too*/</span><span class="hljs-keyword">const</span> brand = { <span class="hljs-attr">name</span>: <span class="hljs-string">"asus"</span>, <span class="hljs-attr">isAvaliable</span>: <span class="hljs-literal">true</span>,}<span class="hljs-comment">/* can be refrenced outside too*/</span>brand.__proto__ = phone<span class="hljs-comment">/* mordern syntax Object.setPrototypeOf(brand, phone)*/</span><span class="hljs-built_in">console</span>.log(brand.RAM); <span class="hljs-comment">// Output: 8</span><span class="hljs-built_in">console</span>.log(brand.weight); <span class="hljs-comment">// Output: 180</span><span class="hljs-built_in">console</span>.log(brand.camera); <span class="hljs-comment">// Output: true</span></code></pre><p>In this example we have established a hierarchy in the order of specification -&gt; phone -&gt; brand.</p><p>Now the brand has phone as its parent element as phone and phone further has specification as its parent element. Allowing brand to access properties of phone which also has access of specification too.</p><h3 id="heading-prototypal-inheritance-vs-classical-inheritance">Prototypal Inheritance vs Classical Inheritance:</h3><ul><li><p>In classical inheritance objects inherits from class and subclass inherits from parent class.</p></li><li><p>Prototypal Inheriting on the other hand supports inheritance from other objects rather than from class only.</p></li></ul><h3 id="heading-conclusion">Conclusion:</h3><p>Prototypal Inheritance is an important property of JavaScript that helps developers to build scalable and reusable code.</p><p>It is widely used in creating many JavaScript frameworks and libraries. It allows you to create object hierarchies, where objects inherit properties and methods from parent objects. This is useful for modeling real-world relationships and organizing code in a logical manner.</p><p><strong># Notes :</strong></p><p>To know more about prototypes checkout <a target="_blank" href="https://youtu.be/uMI5cNeHTOc?si=cBk1AKJ0ZfpuxDpv">Hitesh Choudhary's</a> playlist on JavaScript.</p><p>The Introduction of this blog is generated with the help of ChatGPT on the basis of the content of this blog.</p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others.</p><p>😊 Feel free to use this article's images and to add comments in case of issues.</p><p>🥰 Thank You for reading.</p>]]></content:encoded>
<hashnode:content><![CDATA[<h3 id="heading-introduction">Introduction:</h3><p>JavaScript is a versatile and powerful language, known for its unique object-oriented programming model based on prototypes. Understanding prototypes and prototypal inheritance is crucial for every JavaScript developer, as it forms the foundation of how objects work in the language.</p><p>In this blog, we will dive deep into prototypes and prototypal inheritance in JavaScript. We'll explore how prototypes allow us to use built-in functions and properties, how we can add our own properties to objects using prototypes, and how prototypal inheritance enables objects to inherit properties from other objects. We'll also compare prototypal inheritance with classical inheritance and discuss its practical applications in building scalable and reusable code.</p><p>Whether you're new to JavaScript or looking to deepen your understanding of its core concepts, this blog will provide you with valuable insights into how prototypes and prototypal inheritance work in JavaScript.</p><h3 id="heading-what-is-this-prototype">What is this Prototype?</h3><p>While working with JavaScript we all might have encountered something like this.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710256132246/207b6ddd-dd4b-454b-82ed-40a9bf5ad92b.png" alt class="image--center mx-auto" /></p><p>We all have used many inbuilt functions while using Arrays, Functions, Objects or Strings. Now these functions are not defined by us but how can we use them?</p><p>The answer to this question is <code>Prototype</code> . Prototype helps us to use these functions in our code. When we create an object/array/function/string/etc. the JavaScript engine attaches an object of these functions or properties with our object hence we can use these properties</p><p>To test this :</p><pre><code class="lang-javascript"><span class="hljs-comment">/**** in the console *** create an array */</span><span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">"Apple"</span>, <span class="hljs-string">"Banana"</span>, <span class="hljs-string">"Mango"</span>]<span class="hljs-comment">/* now we can use the hidden properties like find(), filter(), sort() with the array fruits*/</span>fruits.__proto__<span class="hljs-comment">// this will log all the properties with the array fruits</span></code></pre><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710258716724/620ce2d0-b40d-494f-a441-a5b24eb89544.png" alt class="image--center mx-auto" /></p><p>Similarly this can be done for String, functions, Objects as well.</p><p>As we get an object of Properties we will have another object of properties for this returned object which is the base Object</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710258949976/7d2e76ab-ce7a-42b7-8695-5bcddfdd6a44.png" alt class="image--center mx-auto" /></p><h3 id="heading-how-can-we-add-our-own-properties">How can we add our own properties ?</h3><pre><code class="lang-javascript"><span class="hljs-comment">// code snippets for IDE </span><span class="hljs-keyword">const</span> students = [<span class="hljs-string">"Aditya"</span>, <span class="hljs-string">"Jhon"</span>, <span class="hljs-string">"Philips"</span>]<span class="hljs-comment">// We create a new property named hi in Array</span><span class="hljs-built_in">Array</span>.prototype.hi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log( <span class="hljs-string">`hi <span class="hljs-subst">${<span class="hljs-built_in">this</span>}</span>`</span>)}students.hi()<span class="hljs-comment">// This function can be used for any other array too</span><span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">"Apple"</span>, <span class="hljs-string">"Banana"</span>, <span class="hljs-string">"Mango"</span>]fruits.hi()<span class="hljs-keyword">const</span> num = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]num.hi()</code></pre><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710260150280/b800556e-ec91-406c-884d-9099e9653e08.png" alt class="image--center mx-auto" /></p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710260371993/3fa870ee-cff0-49a6-ba9f-9d3787c5846c.png" alt class="image--center mx-auto" /></p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710262224533/95f6a0d9-1c3b-4194-b7cd-be96f43512aa.png" alt class="image--center mx-auto" /></p><p>Here in this example we create a function named hi in Array using <code>prototype</code> which console logs the output.</p><p>Once the Prototype function is created it can be applied to all Arrays as every array will now have a property named hi in the Prototype object. This can be seen in the above pictures how the hi property can be used with 'num' array and 'fruits' array.</p><h3 id="heading-prototypal-inheritance">Prototypal Inheritance:</h3><p>We saw above how to add our own properties in the prototypes.</p><p>However when we create a property in object it can also be used on the arrays this behaviour is due to the Prototypal Inheritance.</p><p>Prototypal Inheritance is the fundamental property in JavaScript in which an object inherits the methods from another object ( parent ) till it reaches null.</p><pre><code class="lang-javascript"><span class="hljs-comment">// creating a property in object</span><span class="hljs-built_in">Object</span>.prototype.hello = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log( <span class="hljs-string">`hello <span class="hljs-subst">${<span class="hljs-built_in">this</span>}</span>`</span>)}num.hello()fruits.hello()students.hello()</code></pre><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710261159254/852db869-f2c7-4622-b53f-32f63a085d53.png" alt class="image--center mx-auto" /></p><p>Here the <code>hello()</code> method is inherited from the Object's Prototype which was in the Array's Prototype.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710262253500/4afb9aef-fca4-427e-848f-6fc85f6653a5.png" alt class="image--center mx-auto" /></p><h3 id="heading-hierarchy">Hierarchy :</h3><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710263576108/ca7ec139-6b3b-4663-8a28-a488a3452d14.png" alt class="image--center mx-auto" /></p><p>The properties created in the Array cannot be used on Strings, Functions and Objects. Similarly properties created in the String cannot be used on Arrays, Functions and Objects. And for functions too the properties created in the Functions cannot be used on Strings, Arrays and Objects.</p><p>But the properties created in the Object can be used on the Arrays, Functions and Strings as well.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1710263262836/996d4025-c3b4-420a-93de-4669952d1dc3.png" alt class="image--center mx-auto" /></p><h3 id="heading-inheritance">Inheritance :</h3><pre><code class="lang-javascript"><span class="hljs-keyword">const</span> specification = { <span class="hljs-attr">RAM</span> : <span class="hljs-number">8</span>, <span class="hljs-attr">weight</span>: <span class="hljs-number">180</span>, <span class="hljs-attr">camera</span>: <span class="hljs-literal">true</span>}<span class="hljs-keyword">const</span> phone = { <span class="hljs-attr">madeIn</span>: <span class="hljs-string">"India"</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">"touchscreen"</span>, <span class="hljs-attr">__proto__</span> : specification }<span class="hljs-comment">/* making refrence to properties of specification now phone has properties of specification too*/</span><span class="hljs-keyword">const</span> brand = { <span class="hljs-attr">name</span>: <span class="hljs-string">"asus"</span>, <span class="hljs-attr">isAvaliable</span>: <span class="hljs-literal">true</span>,}<span class="hljs-comment">/* can be refrenced outside too*/</span>brand.__proto__ = phone<span class="hljs-comment">/* mordern syntax Object.setPrototypeOf(brand, phone)*/</span><span class="hljs-built_in">console</span>.log(brand.RAM); <span class="hljs-comment">// Output: 8</span><span class="hljs-built_in">console</span>.log(brand.weight); <span class="hljs-comment">// Output: 180</span><span class="hljs-built_in">console</span>.log(brand.camera); <span class="hljs-comment">// Output: true</span></code></pre><p>In this example we have established a hierarchy in the order of specification -&gt; phone -&gt; brand.</p><p>Now the brand has phone as its parent element as phone and phone further has specification as its parent element. Allowing brand to access properties of phone which also has access of specification too.</p><h3 id="heading-prototypal-inheritance-vs-classical-inheritance">Prototypal Inheritance vs Classical Inheritance:</h3><ul><li><p>In classical inheritance objects inherits from class and subclass inherits from parent class.</p></li><li><p>Prototypal Inheriting on the other hand supports inheritance from other objects rather than from class only.</p></li></ul><h3 id="heading-conclusion">Conclusion:</h3><p>Prototypal Inheritance is an important property of JavaScript that helps developers to build scalable and reusable code.</p><p>It is widely used in creating many JavaScript frameworks and libraries. It allows you to create object hierarchies, where objects inherit properties and methods from parent objects. This is useful for modeling real-world relationships and organizing code in a logical manner.</p><p><strong># Notes :</strong></p><p>To know more about prototypes checkout <a target="_blank" href="https://youtu.be/uMI5cNeHTOc?si=cBk1AKJ0ZfpuxDpv">Hitesh Choudhary's</a> playlist on JavaScript.</p><p>The Introduction of this blog is generated with the help of ChatGPT on the basis of the content of this blog.</p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others.</p><p>😊 Feel free to use this article's images and to add comments in case of issues.</p><p>🥰 Thank You for reading.</p>]]></hashnode:content>
<hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1710265866843/cc8fc65b-9ebb-4347-8fd4-ac9747bc11bd.png</hashnode:coverImage>
</item>
<item>
<title>
<![CDATA[ MongoDB Aggregation Pipelines : Part 2 ]]>
</title>
<description>
<![CDATA[ Introduction : When the client asks for watch history we want to return an array of watchHistory which contains _id of the videos, and some information of the owner ( uploader ) of that video along with a status code and a custom message. Need of Agg... ]]>
</description>
<link>https://adityabverma.hashnode.dev/mongodb-aggregation-pipelines-part-2</link>
<guid isPermaLink="true">https://adityabverma.hashnode.dev/mongodb-aggregation-pipelines-part-2</guid>
<category>
<![CDATA[ #Watch History ]]>
</category>
<category>
<![CDATA[ MongoDB ]]>
</category>
<category>
<![CDATA[ Aggregation Pipeline ]]>
</category>
<category>
<![CDATA[ Node.js ]]>
</category>
<category>
<![CDATA[ JavaScript ]]>
</category>
<category>
<![CDATA[ backend ]]>
</category>
<dc:creator>
<![CDATA[ Aditya Verma ]]>
</dc:creator>
<pubDate>Mon, 26 Feb 2024 18:16:24 GMT</pubDate>
<content:encoded><![CDATA[<h3 id="heading-introduction">Introduction :</h3><p>When the client asks for watch history we want to return an array of watchHistory which contains _id of the videos, and some information of the owner ( uploader ) of that video along with a status code and a custom message.</p><h3 id="heading-need-of-aggregation-pipelines">Need of Aggregation Pipelines :</h3><p>We could easily get the videos in the watchHistory array by performing number of Database queries. But the problem with this approach is that it is less efficient due to large no of individual database queries which increases the latency, less flexible due to individual queries not being capable enough to perform complex operations and less scalable with increasing size of data.</p><p>MongoDB aggregation pipelines solves these issues by providing more flexibility and scalability.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708858946947/689e6193-e574-4d6a-bbc8-a4e8adb9cbc8.png?auto=compress,format&amp;format=webp" alt /></p><h3 id="heading-understanding-the-working">Understanding the Working :</h3><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708964152017/4ae997df-d877-43dd-90b4-46e5e9c8cff7.png" alt class="image--center mx-auto" /></p><ul><li><p>We first search for the videos in the videos collection of the database which are having the same _id as the elements in the array.</p></li><li><p>Then we search for the owner in the user collection of the database having _id similar to the owner id in the video.</p></li></ul><h3 id="heading-controller-to-get-user-watch-history">Controller to get User Watch History :</h3><pre><code class="lang-javascript"><span class="hljs-keyword">const</span> getWatchHistory = asyncHandler(<span class="hljs-keyword">async</span> (req, res) =&gt; { <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.aggregate([ { <span class="hljs-comment">// Stage 1:</span> <span class="hljs-attr">$match</span>: { <span class="hljs-attr">_id</span>: <span class="hljs-keyword">new</span> mongoose.Types.ObjectId(req.user?._id)<span class="hljs-comment">// here we use mongoose.types.objectid as req.user.id does not return the _id but the entire string of the id</span> } }, { <span class="hljs-comment">//Stage 2:</span> <span class="hljs-attr">$lookup</span>: { <span class="hljs-attr">from</span>: <span class="hljs-string">"videos"</span>, <span class="hljs-attr">localField</span>: <span class="hljs-string">"watchHistory"</span>, <span class="hljs-attr">foreignField</span>: <span class="hljs-string">"_id"</span>, <span class="hljs-attr">as</span>: <span class="hljs-string">"watchHistory"</span>, <span class="hljs-attr">pipeline</span>: [ { <span class="hljs-attr">$lookup</span>: { <span class="hljs-attr">from</span>: <span class="hljs-string">"users"</span>, <span class="hljs-attr">localField</span>: <span class="hljs-string">"owner"</span>, <span class="hljs-attr">foreignField</span>: <span class="hljs-string">"_id"</span>, <span class="hljs-attr">as</span>: <span class="hljs-string">"owner"</span>, <span class="hljs-attr">pipeline</span>: [ { <span class="hljs-attr">$project</span>: { <span class="hljs-attr">fullName</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">username</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">avatar</span>: <span class="hljs-number">1</span> } } ] } }, { <span class="hljs-attr">$addFields</span>: { <span class="hljs-attr">owner</span>: { <span class="hljs-attr">$first</span>: <span class="hljs-string">"$owner"</span> } } } ] } } ]) <span class="hljs-keyword">if</span> (!user.length) { <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApiError(<span class="hljs-number">500</span>, <span class="hljs-string">"couldn't get user"</span>) } <span class="hljs-keyword">if</span> (!user[<span class="hljs-number">0</span>].watchHistory.length) { <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApiError(<span class="hljs-number">400</span>, <span class="hljs-string">"No videos in watch history"</span>) } <span class="hljs-keyword">return</span> res .status(<span class="hljs-number">200</span>) .json(<span class="hljs-keyword">new</span> ApiResponse(<span class="hljs-number">200</span>, user[<span class="hljs-number">0</span>].watchHistory, <span class="hljs-string">"Watch history fetched successfully"</span>))})</code></pre><ul><li><p><strong>Stage 1: ( $match )</strong></p><p> This stage filters out the document from the collection of documents ( here different users ) according to the given parameters passed in it and returns it to the next stage.</p><p> In this stage we get all the documents in which the id matches with the id ( after converting the id to into right format as req.user.id is a string ) coming from the req.user ( middleware ).</p></li><li><p><strong>Stage 2: ( $lookup )</strong></p><p> This stage joins two collection in the same database and adds an array field to each document.</p><p> We perform the first lookup to join users collection and videos collection to fetch videos information. We get all the documents from the videos collection which have id similar to the element in the watchHistory array of user and all the documents are stored in the array in the form of objects.</p><p> The second lookup joins the videos collection to the users collection this is for the fetching of owner's information. We get a document from the users collection whose id matches to the owner ( owner id in the user collection as the owner is also an user) in the video document. This document in the form of an array element is stored in the owner array.</p><p> We use <code>$project</code> to have only the required fields in the document of the array ( owner ).</p><p> - - - &gt; So now in owner array we have documents ( object ) in which each document contains the username, fullName and avatar of the owner.</p><p> Now using <code>$addFields</code> we add the first element of owner array (we will only have one object in owner array as there can be only one owner for a video ) in the owner field in the video document.</p><p> - - - &gt; In watchHistory array there are many such video documents ( objects ) consisting of the details of their owner in the form of an object in the owner field.</p><p> - - - &gt; Now the const user is an array which consist only one element i.e. user document which has watchHistory inside which we get our multiple video documents which further has its respective owner document.</p></li></ul><p>After performing proper error handlings we return our response with appropriate status code and the watchHistory of the user along with a custom message.</p><h3 id="heading-testing">Testing :</h3><p>To setup MongoDB Atlas checkout : Hitesh Choudhary's video to <a target="_blank" href="https://youtu.be/SUZKhBvxW5c?si=jiOI6ipMyyo2ulug">setup MongoDB atlas</a> .</p><p>If you want the sample data checkout my <a target="_blank" href="https://gist.github.com/AdityaBVerma/b2168915a74d4a1e6b43e11c458b9f8c#file-users-json">GitHub Gist AdityaBVerma</a> .</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708969801547/0e5727a6-51a5-4300-b87e-691e50c070cc.png" alt class="image--center mx-auto" /></p><p><strong># Notes :</strong></p><p>To know more about MongoDB aggregation Pipelines visit <a target="_blank" href="https://www.mongodb.com/docs/manual/aggregation/">MongoDB Aggregation Pipelines</a> .</p><p>To learn aggregation pipelines in a fun way do checkout <a target="_blank" href="https://youtube.com/playlist?list=PLRAV69dS1uWQ6CZCehxKy0rjkqhQ2Z88t&amp;si=-_KWxVj67Yrd1uh6">Hitesh Choudhary's playlist</a> .</p><p>To know more about the controllers and the utilities and middleware used in it visit my repo on Git hub <a target="_blank" href="https://github.com/AdityaBVerma/Backend-with-Js">AdityaBVerma/Backend-with-Js</a></p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others.</p><p>😊 Feel free to use this article's images and to add comments in case of issues.</p><p>🥰 Thank You for reading.</p>]]></content:encoded>
<hashnode:content><![CDATA[<h3 id="heading-introduction">Introduction :</h3><p>When the client asks for watch history we want to return an array of watchHistory which contains _id of the videos, and some information of the owner ( uploader ) of that video along with a status code and a custom message.</p><h3 id="heading-need-of-aggregation-pipelines">Need of Aggregation Pipelines :</h3><p>We could easily get the videos in the watchHistory array by performing number of Database queries. But the problem with this approach is that it is less efficient due to large no of individual database queries which increases the latency, less flexible due to individual queries not being capable enough to perform complex operations and less scalable with increasing size of data.</p><p>MongoDB aggregation pipelines solves these issues by providing more flexibility and scalability.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708858946947/689e6193-e574-4d6a-bbc8-a4e8adb9cbc8.png?auto=compress,format&amp;format=webp" alt /></p><h3 id="heading-understanding-the-working">Understanding the Working :</h3><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708964152017/4ae997df-d877-43dd-90b4-46e5e9c8cff7.png" alt class="image--center mx-auto" /></p><ul><li><p>We first search for the videos in the videos collection of the database which are having the same _id as the elements in the array.</p></li><li><p>Then we search for the owner in the user collection of the database having _id similar to the owner id in the video.</p></li></ul><h3 id="heading-controller-to-get-user-watch-history">Controller to get User Watch History :</h3><pre><code class="lang-javascript"><span class="hljs-keyword">const</span> getWatchHistory = asyncHandler(<span class="hljs-keyword">async</span> (req, res) =&gt; { <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> User.aggregate([ { <span class="hljs-comment">// Stage 1:</span> <span class="hljs-attr">$match</span>: { <span class="hljs-attr">_id</span>: <span class="hljs-keyword">new</span> mongoose.Types.ObjectId(req.user?._id)<span class="hljs-comment">// here we use mongoose.types.objectid as req.user.id does not return the _id but the entire string of the id</span> } }, { <span class="hljs-comment">//Stage 2:</span> <span class="hljs-attr">$lookup</span>: { <span class="hljs-attr">from</span>: <span class="hljs-string">"videos"</span>, <span class="hljs-attr">localField</span>: <span class="hljs-string">"watchHistory"</span>, <span class="hljs-attr">foreignField</span>: <span class="hljs-string">"_id"</span>, <span class="hljs-attr">as</span>: <span class="hljs-string">"watchHistory"</span>, <span class="hljs-attr">pipeline</span>: [ { <span class="hljs-attr">$lookup</span>: { <span class="hljs-attr">from</span>: <span class="hljs-string">"users"</span>, <span class="hljs-attr">localField</span>: <span class="hljs-string">"owner"</span>, <span class="hljs-attr">foreignField</span>: <span class="hljs-string">"_id"</span>, <span class="hljs-attr">as</span>: <span class="hljs-string">"owner"</span>, <span class="hljs-attr">pipeline</span>: [ { <span class="hljs-attr">$project</span>: { <span class="hljs-attr">fullName</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">username</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">avatar</span>: <span class="hljs-number">1</span> } } ] } }, { <span class="hljs-attr">$addFields</span>: { <span class="hljs-attr">owner</span>: { <span class="hljs-attr">$first</span>: <span class="hljs-string">"$owner"</span> } } } ] } } ]) <span class="hljs-keyword">if</span> (!user.length) { <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApiError(<span class="hljs-number">500</span>, <span class="hljs-string">"couldn't get user"</span>) } <span class="hljs-keyword">if</span> (!user[<span class="hljs-number">0</span>].watchHistory.length) { <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApiError(<span class="hljs-number">400</span>, <span class="hljs-string">"No videos in watch history"</span>) } <span class="hljs-keyword">return</span> res .status(<span class="hljs-number">200</span>) .json(<span class="hljs-keyword">new</span> ApiResponse(<span class="hljs-number">200</span>, user[<span class="hljs-number">0</span>].watchHistory, <span class="hljs-string">"Watch history fetched successfully"</span>))})</code></pre><ul><li><p><strong>Stage 1: ( $match )</strong></p><p> This stage filters out the document from the collection of documents ( here different users ) according to the given parameters passed in it and returns it to the next stage.</p><p> In this stage we get all the documents in which the id matches with the id ( after converting the id to into right format as req.user.id is a string ) coming from the req.user ( middleware ).</p></li><li><p><strong>Stage 2: ( $lookup )</strong></p><p> This stage joins two collection in the same database and adds an array field to each document.</p><p> We perform the first lookup to join users collection and videos collection to fetch videos information. We get all the documents from the videos collection which have id similar to the element in the watchHistory array of user and all the documents are stored in the array in the form of objects.</p><p> The second lookup joins the videos collection to the users collection this is for the fetching of owner's information. We get a document from the users collection whose id matches to the owner ( owner id in the user collection as the owner is also an user) in the video document. This document in the form of an array element is stored in the owner array.</p><p> We use <code>$project</code> to have only the required fields in the document of the array ( owner ).</p><p> - - - &gt; So now in owner array we have documents ( object ) in which each document contains the username, fullName and avatar of the owner.</p><p> Now using <code>$addFields</code> we add the first element of owner array (we will only have one object in owner array as there can be only one owner for a video ) in the owner field in the video document.</p><p> - - - &gt; In watchHistory array there are many such video documents ( objects ) consisting of the details of their owner in the form of an object in the owner field.</p><p> - - - &gt; Now the const user is an array which consist only one element i.e. user document which has watchHistory inside which we get our multiple video documents which further has its respective owner document.</p></li></ul><p>After performing proper error handlings we return our response with appropriate status code and the watchHistory of the user along with a custom message.</p><h3 id="heading-testing">Testing :</h3><p>To setup MongoDB Atlas checkout : Hitesh Choudhary's video to <a target="_blank" href="https://youtu.be/SUZKhBvxW5c?si=jiOI6ipMyyo2ulug">setup MongoDB atlas</a> .</p><p>If you want the sample data checkout my <a target="_blank" href="https://gist.github.com/AdityaBVerma/b2168915a74d4a1e6b43e11c458b9f8c#file-users-json">GitHub Gist AdityaBVerma</a> .</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708969801547/0e5727a6-51a5-4300-b87e-691e50c070cc.png" alt class="image--center mx-auto" /></p><p><strong># Notes :</strong></p><p>To know more about MongoDB aggregation Pipelines visit <a target="_blank" href="https://www.mongodb.com/docs/manual/aggregation/">MongoDB Aggregation Pipelines</a> .</p><p>To learn aggregation pipelines in a fun way do checkout <a target="_blank" href="https://youtube.com/playlist?list=PLRAV69dS1uWQ6CZCehxKy0rjkqhQ2Z88t&amp;si=-_KWxVj67Yrd1uh6">Hitesh Choudhary's playlist</a> .</p><p>To know more about the controllers and the utilities and middleware used in it visit my repo on Git hub <a target="_blank" href="https://github.com/AdityaBVerma/Backend-with-Js">AdityaBVerma/Backend-with-Js</a></p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others.</p><p>😊 Feel free to use this article's images and to add comments in case of issues.</p><p>🥰 Thank You for reading.</p>]]></hashnode:content>
<hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1708971261919/92b2ea4c-e072-47d5-b605-bb655ffdfabb.png</hashnode:coverImage>
</item>
<item>
<title>
<![CDATA[ MongoDB Aggregation Pipelines : Part 1 ]]>
</title>
<description>
<![CDATA[ Introduction : When we want a user's channel profile we are expecting certain values such as avatar, username, email, cover image, subscriber count, number of channels user is subscribed to and a subscribe button. Hence we want our controller to retu... ]]>
</description>
<link>https://adityabverma.hashnode.dev/mongodb-aggregation-pipelines-part-1</link>
<guid isPermaLink="true">https://adityabverma.hashnode.dev/mongodb-aggregation-pipelines-part-1</guid>
<category>
<![CDATA[ MongoDB ]]>
</category>
<category>
<![CDATA[ aggregation ]]>
</category>
<category>
<![CDATA[ Pipeline ]]>
</category>
<category>
<![CDATA[ Node.js ]]>
</category>
<category>
<![CDATA[ Databases ]]>
</category>
<category>
<![CDATA[ controllers ]]>
</category>
<dc:creator>
<![CDATA[ Aditya Verma ]]>
</dc:creator>
<pubDate>Sun, 25 Feb 2024 18:05:09 GMT</pubDate>
<content:encoded><![CDATA[<h3 id="heading-introduction">Introduction :</h3><p>When we want a user's channel profile we are expecting certain values such as avatar, username, email, cover image, subscriber count, number of channels user is subscribed to and a subscribe button. Hence we want our controller to return these values.</p><h3 id="heading-need-of-aggregation-pipelines">Need of Aggregation Pipelines :</h3><p>When having <strong>Single User Model with Subscriber and Subscription Arrays</strong> we can have a simpler schema and easier data access. The problem arises when a user has subscribers and channels subscribed to in millions. This will lead to performance and scalability issues due to the large size of user document.</p><p>To solve this issue we use <strong>Separate Models for Users and Subscriptions</strong> this leads to better flexibility , scalability and performance. However this requires more complex queries to join the user and subscription data. Here we use MongoDB Aggregation Pipelines to write these complex queries.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708858946947/689e6193-e574-4d6a-bbc8-a4e8adb9cbc8.png" alt class="image--center mx-auto" /></p><h3 id="heading-understanding-the-working">Understanding the working :</h3><p>Whenever someone subscribes we create a separate document containing the ObjectID of the subscriber ( the one who is subscribing ) and the channel ( also a user to whom the subscriber is subscribing ). This creates several documents containing subscriber and channel id.</p><ul><li><p><strong>Getting the subscriber count:</strong></p><p> When we need for subscriber count of a particular channel ( a user ) we will ask for all the documents having channel same as the channel's ObjectID. Hence we will have all the subscribers which have subscribed to channel in different documents all having the same channel ( the user ).</p><p> The number of Documents we get after applying this filter is the subscriber count of the channel.</p></li><li><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708860689782/8d7fae24-4070-401e-aa66-20f6839add27.png" alt class="image--center mx-auto" /></p></li><li><p><strong>Getting the count of the channels subscribed to:</strong></p><p> When we need to have the count of the channels the user has subscribed to we will ask for all the documents having the subscriber same as the user's ObjectID. Hence we will get all the channels the user has subscribed to in different documents all having the same subscriber ( user ).</p><p> The number of Documents we get after applying this filter is the number of channel the user has subscribed to.</p><p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708860720711/8f264825-e3cd-474e-95b8-67a7f7e0edae.png" alt class="image--center mx-auto" /></p></li></ul><h3 id="heading-controller-to-get-user-profile">Controller to get user profile :</h3><pre><code class="lang-javascript"><span class="hljs-keyword">const</span> getUserChannelProfile = asyncHandler (<span class="hljs-keyword">async</span> (req, res) =&gt; { <span class="hljs-keyword">const</span> {username} = req.params <span class="hljs-keyword">if</span> (!username?.trim()) { <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApiError(<span class="hljs-number">400</span>, <span class="hljs-string">"User name is missing"</span>) }<span class="hljs-comment">// Aggregation Pipeline</span> <span class="hljs-keyword">const</span> channel = <span class="hljs-keyword">await</span> User.aggregate([ { <span class="hljs-comment">// Stage 1:</span> <span class="hljs-attr">$match</span>: { <span class="hljs-attr">username</span> : username?.toLowerCase() } }, { <span class="hljs-comment">// Stage 2:</span> <span class="hljs-attr">$lookup</span>:{ <span class="hljs-attr">from</span>: <span class="hljs-string">"subscriptions"</span>, <span class="hljs-attr">localField</span>: <span class="hljs-string">"_id"</span>, <span class="hljs-attr">foreignField</span>: <span class="hljs-string">"channel"</span>, <span class="hljs-attr">as</span>: <span class="hljs-string">"subscribers"</span> } }, {<span class="hljs-comment">// Stage 3:</span> <span class="hljs-attr">$lookup</span>:{ <span class="hljs-attr">from</span>: <span class="hljs-string">"subscriptions"</span>, <span class="hljs-attr">localField</span>: <span class="hljs-string">"_id"</span>, <span class="hljs-attr">foreignField</span>: <span class="hljs-string">"subscriber"</span>, <span class="hljs-attr">as</span>: <span class="hljs-string">"subscribedTo"</span> } }, {<span class="hljs-comment">// Stage 4:</span> <span class="hljs-attr">$addFields</span>:{ <span class="hljs-attr">subscribersCount</span>: { <span class="hljs-attr">$size</span>: <span class="hljs-string">"$subscribers"</span> }, <span class="hljs-attr">channelSubscribedToCount</span>: { <span class="hljs-attr">$size</span>: <span class="hljs-string">"$subscribedTo"</span> }, <span class="hljs-attr">isSubscribed</span>: { <span class="hljs-attr">$cond</span>: { <span class="hljs-attr">if</span>: {<span class="hljs-attr">$in</span>: [ req.user?._id, <span class="hljs-string">"$subscribers.subscriber"</span>]}, <span class="hljs-attr">then</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">else</span>: <span class="hljs-literal">false</span> } } } }, {<span class="hljs-comment">// Stage 5:</span> <span class="hljs-attr">$project</span>: { <span class="hljs-attr">fullName</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">username</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">email</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">avatar</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">coverImage</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">subscribersCount</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">channelSubscribedToCount</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">isSubscribed</span>: <span class="hljs-number">1</span>, } } ]) <span class="hljs-keyword">if</span> (!channel.length) { <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApiError(<span class="hljs-number">400</span>, <span class="hljs-string">"channel does not exist"</span>) } <span class="hljs-keyword">return</span> res .status(<span class="hljs-number">200</span>) .json( <span class="hljs-keyword">new</span> ApiResponse(<span class="hljs-number">200</span>, channel[<span class="hljs-number">0</span>], <span class="hljs-string">"User channel fetched successfully"</span>) )})</code></pre><ul><li><p><strong>Stage 1: ( $match )</strong></p><p> This stage filters out the document from the collection of documents ( here different users ) according to the given parameters passed in it and returns it to the next stage.</p><p> Here in this stage we match the username in the User model with username which is coming from the req.params ( routing: /c/:username ). I have used <code>toLowercase()</code> as I had converted the username in lowercase before storing them in my database.</p></li><li><p><strong>Stage 2: ( $lookup )</strong></p><p> This stage joins two collection in the same database and adds an array field to each document.</p><p> Here it searches for the document in the subscriptions model where the foreign field channel has the same value as the local field ( users ) " _id ".These results are added to the subscribers array in the output document.</p><p> Hence in users model we now have an array name subscribers which has documents in it with the same value of channel in each document. In simple words we got our array of subscribers.</p></li><li><p><strong>Stage 3: ( $lookup )</strong></p><p> Here it searches for the document in the subscriptions model where the foreign field subscriber has the same value as the local field ( users ) " _id ".These results are added to the subscribedTo array in the output document.</p><p> Hence in users model we now have an array name subscribedTo which has documents in it with the same value of subscriber in each document. In simple words we got our array of the channels we have subscribed to.</p></li><li><p><strong>Stage 4: ( $addFields )</strong></p><p> This helps us to add new fields in our users model.</p><p> We have added a new field subscribersCount in our model which gives us the size of the array subscribers given by stage 2 lookup with the help of <code>$size</code> .</p><p> Next we have added a new field channelSubscribedToCount in our model which gives us the size of the array subscribedTo given by stage 3 lookup with the help of <code>$size</code> .</p><p> Then we add a field named isSubscribed in which we have passed a condition where $if the request to get the channel profile is coming from a _id which is already present in on of the objects in the array of subscribers then it gives us the value true i.e. we have already subscribed to the username we are searching for.</p></li><li><p><strong>Stage 5: ( $project )</strong></p><p> This field passes along the documents with the requested fields to the next stage in the pipeline and any thing not included in this won't be passed onto the next stage.</p><p> It has a simple syntax in which the <code>field</code> : <code>1</code> or <code>true</code> implies inclusion of the field and <code>field</code> : <code>0</code> or <code>false</code> implies exclusion.</p></li></ul><p>This aggregation pipeline which consist of 5 stages returns an object containing avatar, username, email, cover image, subscriber count, number of channels user is subscribed to and isSubscribed fields in the const channel</p><p>Later we return this channel with appropriate status code and message after performing proper error handlings.</p><p>Note: we have returned channel[0] as channel is an array consisting objects here only one element will be present in the channel.</p><h3 id="heading-testing">Testing :</h3><p>To setup MongoDB Atlas checkout : Hitesh Choudhary's video to <a target="_blank" href="https://youtu.be/SUZKhBvxW5c?si=jiOI6ipMyyo2ulug">setup MongoDB atlas</a> .</p><p>If you want the sample data checkout my <a target="_blank" href="https://gist.github.com/AdityaBVerma/b2168915a74d4a1e6b43e11c458b9f8c#file-users-json">GitHub Gist AdityaBVerma</a> .</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708877761175/921fcc8d-70b2-49b2-b6a8-c7b188081392.png" alt class="image--center mx-auto" /></p><p><strong># Notes :</strong></p><p>To know more about MongoDB aggregation Pipelines visit <a target="_blank" href="https://www.mongodb.com/docs/manual/aggregation/">MongoDB Aggregation Pipelines</a> .</p><p>To learn aggregation pipelines in a fun way do checkout <a target="_blank" href="https://youtube.com/playlist?list=PLRAV69dS1uWQ6CZCehxKy0rjkqhQ2Z88t&amp;si=-_KWxVj67Yrd1uh6">Hitesh Choudhary's playlist</a> .</p><p>To know more about the controllers and the utilities and middleware used in it visit my repo on Git hub <a target="_blank" href="https://github.com/AdityaBVerma/Backend-with-Js">AdityaBVerma/Backend-with-Js</a></p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others.</p><p>😊 Feel free to use this article's images and to add comments in case of issues.</p><p>🥰 Thank You for reading.</p>]]></content:encoded>
<hashnode:content><![CDATA[<h3 id="heading-introduction">Introduction :</h3><p>When we want a user's channel profile we are expecting certain values such as avatar, username, email, cover image, subscriber count, number of channels user is subscribed to and a subscribe button. Hence we want our controller to return these values.</p><h3 id="heading-need-of-aggregation-pipelines">Need of Aggregation Pipelines :</h3><p>When having <strong>Single User Model with Subscriber and Subscription Arrays</strong> we can have a simpler schema and easier data access. The problem arises when a user has subscribers and channels subscribed to in millions. This will lead to performance and scalability issues due to the large size of user document.</p><p>To solve this issue we use <strong>Separate Models for Users and Subscriptions</strong> this leads to better flexibility , scalability and performance. However this requires more complex queries to join the user and subscription data. Here we use MongoDB Aggregation Pipelines to write these complex queries.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708858946947/689e6193-e574-4d6a-bbc8-a4e8adb9cbc8.png" alt class="image--center mx-auto" /></p><h3 id="heading-understanding-the-working">Understanding the working :</h3><p>Whenever someone subscribes we create a separate document containing the ObjectID of the subscriber ( the one who is subscribing ) and the channel ( also a user to whom the subscriber is subscribing ). This creates several documents containing subscriber and channel id.</p><ul><li><p><strong>Getting the subscriber count:</strong></p><p> When we need for subscriber count of a particular channel ( a user ) we will ask for all the documents having channel same as the channel's ObjectID. Hence we will have all the subscribers which have subscribed to channel in different documents all having the same channel ( the user ).</p><p> The number of Documents we get after applying this filter is the subscriber count of the channel.</p></li><li><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708860689782/8d7fae24-4070-401e-aa66-20f6839add27.png" alt class="image--center mx-auto" /></p></li><li><p><strong>Getting the count of the channels subscribed to:</strong></p><p> When we need to have the count of the channels the user has subscribed to we will ask for all the documents having the subscriber same as the user's ObjectID. Hence we will get all the channels the user has subscribed to in different documents all having the same subscriber ( user ).</p><p> The number of Documents we get after applying this filter is the number of channel the user has subscribed to.</p><p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708860720711/8f264825-e3cd-474e-95b8-67a7f7e0edae.png" alt class="image--center mx-auto" /></p></li></ul><h3 id="heading-controller-to-get-user-profile">Controller to get user profile :</h3><pre><code class="lang-javascript"><span class="hljs-keyword">const</span> getUserChannelProfile = asyncHandler (<span class="hljs-keyword">async</span> (req, res) =&gt; { <span class="hljs-keyword">const</span> {username} = req.params <span class="hljs-keyword">if</span> (!username?.trim()) { <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApiError(<span class="hljs-number">400</span>, <span class="hljs-string">"User name is missing"</span>) }<span class="hljs-comment">// Aggregation Pipeline</span> <span class="hljs-keyword">const</span> channel = <span class="hljs-keyword">await</span> User.aggregate([ { <span class="hljs-comment">// Stage 1:</span> <span class="hljs-attr">$match</span>: { <span class="hljs-attr">username</span> : username?.toLowerCase() } }, { <span class="hljs-comment">// Stage 2:</span> <span class="hljs-attr">$lookup</span>:{ <span class="hljs-attr">from</span>: <span class="hljs-string">"subscriptions"</span>, <span class="hljs-attr">localField</span>: <span class="hljs-string">"_id"</span>, <span class="hljs-attr">foreignField</span>: <span class="hljs-string">"channel"</span>, <span class="hljs-attr">as</span>: <span class="hljs-string">"subscribers"</span> } }, {<span class="hljs-comment">// Stage 3:</span> <span class="hljs-attr">$lookup</span>:{ <span class="hljs-attr">from</span>: <span class="hljs-string">"subscriptions"</span>, <span class="hljs-attr">localField</span>: <span class="hljs-string">"_id"</span>, <span class="hljs-attr">foreignField</span>: <span class="hljs-string">"subscriber"</span>, <span class="hljs-attr">as</span>: <span class="hljs-string">"subscribedTo"</span> } }, {<span class="hljs-comment">// Stage 4:</span> <span class="hljs-attr">$addFields</span>:{ <span class="hljs-attr">subscribersCount</span>: { <span class="hljs-attr">$size</span>: <span class="hljs-string">"$subscribers"</span> }, <span class="hljs-attr">channelSubscribedToCount</span>: { <span class="hljs-attr">$size</span>: <span class="hljs-string">"$subscribedTo"</span> }, <span class="hljs-attr">isSubscribed</span>: { <span class="hljs-attr">$cond</span>: { <span class="hljs-attr">if</span>: {<span class="hljs-attr">$in</span>: [ req.user?._id, <span class="hljs-string">"$subscribers.subscriber"</span>]}, <span class="hljs-attr">then</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">else</span>: <span class="hljs-literal">false</span> } } } }, {<span class="hljs-comment">// Stage 5:</span> <span class="hljs-attr">$project</span>: { <span class="hljs-attr">fullName</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">username</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">email</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">avatar</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">coverImage</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">subscribersCount</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">channelSubscribedToCount</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">isSubscribed</span>: <span class="hljs-number">1</span>, } } ]) <span class="hljs-keyword">if</span> (!channel.length) { <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApiError(<span class="hljs-number">400</span>, <span class="hljs-string">"channel does not exist"</span>) } <span class="hljs-keyword">return</span> res .status(<span class="hljs-number">200</span>) .json( <span class="hljs-keyword">new</span> ApiResponse(<span class="hljs-number">200</span>, channel[<span class="hljs-number">0</span>], <span class="hljs-string">"User channel fetched successfully"</span>) )})</code></pre><ul><li><p><strong>Stage 1: ( $match )</strong></p><p> This stage filters out the document from the collection of documents ( here different users ) according to the given parameters passed in it and returns it to the next stage.</p><p> Here in this stage we match the username in the User model with username which is coming from the req.params ( routing: /c/:username ). I have used <code>toLowercase()</code> as I had converted the username in lowercase before storing them in my database.</p></li><li><p><strong>Stage 2: ( $lookup )</strong></p><p> This stage joins two collection in the same database and adds an array field to each document.</p><p> Here it searches for the document in the subscriptions model where the foreign field channel has the same value as the local field ( users ) " _id ".These results are added to the subscribers array in the output document.</p><p> Hence in users model we now have an array name subscribers which has documents in it with the same value of channel in each document. In simple words we got our array of subscribers.</p></li><li><p><strong>Stage 3: ( $lookup )</strong></p><p> Here it searches for the document in the subscriptions model where the foreign field subscriber has the same value as the local field ( users ) " _id ".These results are added to the subscribedTo array in the output document.</p><p> Hence in users model we now have an array name subscribedTo which has documents in it with the same value of subscriber in each document. In simple words we got our array of the channels we have subscribed to.</p></li><li><p><strong>Stage 4: ( $addFields )</strong></p><p> This helps us to add new fields in our users model.</p><p> We have added a new field subscribersCount in our model which gives us the size of the array subscribers given by stage 2 lookup with the help of <code>$size</code> .</p><p> Next we have added a new field channelSubscribedToCount in our model which gives us the size of the array subscribedTo given by stage 3 lookup with the help of <code>$size</code> .</p><p> Then we add a field named isSubscribed in which we have passed a condition where $if the request to get the channel profile is coming from a _id which is already present in on of the objects in the array of subscribers then it gives us the value true i.e. we have already subscribed to the username we are searching for.</p></li><li><p><strong>Stage 5: ( $project )</strong></p><p> This field passes along the documents with the requested fields to the next stage in the pipeline and any thing not included in this won't be passed onto the next stage.</p><p> It has a simple syntax in which the <code>field</code> : <code>1</code> or <code>true</code> implies inclusion of the field and <code>field</code> : <code>0</code> or <code>false</code> implies exclusion.</p></li></ul><p>This aggregation pipeline which consist of 5 stages returns an object containing avatar, username, email, cover image, subscriber count, number of channels user is subscribed to and isSubscribed fields in the const channel</p><p>Later we return this channel with appropriate status code and message after performing proper error handlings.</p><p>Note: we have returned channel[0] as channel is an array consisting objects here only one element will be present in the channel.</p><h3 id="heading-testing">Testing :</h3><p>To setup MongoDB Atlas checkout : Hitesh Choudhary's video to <a target="_blank" href="https://youtu.be/SUZKhBvxW5c?si=jiOI6ipMyyo2ulug">setup MongoDB atlas</a> .</p><p>If you want the sample data checkout my <a target="_blank" href="https://gist.github.com/AdityaBVerma/b2168915a74d4a1e6b43e11c458b9f8c#file-users-json">GitHub Gist AdityaBVerma</a> .</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708877761175/921fcc8d-70b2-49b2-b6a8-c7b188081392.png" alt class="image--center mx-auto" /></p><p><strong># Notes :</strong></p><p>To know more about MongoDB aggregation Pipelines visit <a target="_blank" href="https://www.mongodb.com/docs/manual/aggregation/">MongoDB Aggregation Pipelines</a> .</p><p>To learn aggregation pipelines in a fun way do checkout <a target="_blank" href="https://youtube.com/playlist?list=PLRAV69dS1uWQ6CZCehxKy0rjkqhQ2Z88t&amp;si=-_KWxVj67Yrd1uh6">Hitesh Choudhary's playlist</a> .</p><p>To know more about the controllers and the utilities and middleware used in it visit my repo on Git hub <a target="_blank" href="https://github.com/AdityaBVerma/Backend-with-Js">AdityaBVerma/Backend-with-Js</a></p><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p> If you liked this article, consider sharing it with others.</p><p>😊 Feel free to use this article's images and to add comments in case of issues.</p><p>🥰 Thank You for reading.</p>]]></hashnode:content>
<hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1708883388746/0feb0bce-4ac6-43d6-88f3-d5fb2b192458.png</hashnode:coverImage>
</item>
<item>
<title>
<![CDATA[ Access Tokens and Refresh Tokens ]]>
</title>
<description>
<![CDATA[ Introduction : Tokens are used to authenticate users and authorize requests from clients without keeping the session data on the servers. Tokens provide a way to avoid storing tokens in a database by encoding all of the necessary information in the t... ]]>
</description>
<link>https://adityabverma.hashnode.dev/access-tokens-and-refresh-tokens</link>
<guid isPermaLink="true">https://adityabverma.hashnode.dev/access-tokens-and-refresh-tokens</guid>
<category>
<![CDATA[ accesstoken ]]>
</category>
<category>
<![CDATA[ refresh-token ]]>
</category>
<category>
<![CDATA[ #HiteshChaudhary ]]>
</category>
<category>
<![CDATA[ Web Development ]]>
</category>
<category>
<![CDATA[ JavaScript ]]>
</category>
<category>
<![CDATA[ Node.js ]]>
</category>
<dc:creator>
<![CDATA[ Aditya Verma ]]>
</dc:creator>
<pubDate>Tue, 20 Feb 2024 16:07:49 GMT</pubDate>
<content:encoded><![CDATA[<h3 id="heading-introduction">Introduction :</h3><p>Tokens are used to authenticate users and authorize requests from clients without keeping the session data on the servers.</p><p>Tokens provide a way to avoid storing tokens in a database by encoding all of the necessary information in the token string itself.</p><p>The main benefit of this is that API servers are able to verify access tokens without doing a database lookup on every API request, making the API much more easily scalable.</p><p>Here in this article we will talk about Access token and Refresh token.</p><h3 id="heading-access-token">Access Token :</h3><p>An access token provides temporary access to restricted resources such as APIs or other resources of the website.</p><p>Access token is a bearer token. This means that those who have it can access the resources of the website. It is focuses more on accessing the resources rather than identification. Malicious users can compromise a system and steal access token and use it to access the restricted resources. There are many ways to avoid this by following some best practices.</p><p>Generally access tokens are short lived having lifespan ranging from a few minutes to a few hours. This ensures that even if the access token is compromised it can be used only for a limited amount of time before it expires.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708435613014/5a80a491-c968-4089-b582-105d9d2830ba.avif" alt class="image--center mx-auto" /></p><h3 id="heading-refresh-token">Refresh Token :</h3><p>As we have seen that access tokens are short lived hence there is a need to regenerate a new access token to be able to use the restricted resources. This can be achieved by either making the user to again login entering the credentials or by using refresh tokens. Making the client login frequently can destroy the user experience. Hence we use refresh tokens.</p><p>Once the access token expires the client can use refresh token to generate ( refreshed ) a new access token. Hence refresh token acts as a credential that lets the client have new access token without making them login again by entering the credentials. The client can generate as many access tokens with the help of refresh token till the refresh token is valid and not expired. The refresh tokens have a longer duration of life when compared to access token.</p><p>Refresh token is very important and it gives a lot of power to the client hence a compromise in its security can give its access to malicious users. These users whether being legitimate or not can generate access tokens. To avoid this happening companies use various methods one of them is Refresh Token Rotation.</p><h3 id="heading-refresh-token-rotation">Refresh Token Rotation :</h3><p>Refresh token rotation is the process in which whenever a new access token is generated ( refreshed ) a new refresh token is also generated and returned.</p><p>To know more about Refresh Token Rotation checkout:</p><div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation">https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation</a></div><p> </p><h3 id="heading-defining-a-method-to-generate-access-token-and-refresh-token-using-mongoose">Defining a method to generate access token and refresh token using mongoose:</h3><pre><code class="lang-javascript">userSchema.methods.generateAccessToken = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">const</span> payload = { <span class="hljs-attr">_id</span>: <span class="hljs-built_in">this</span>._id, <span class="hljs-attr">email</span>: <span class="hljs-built_in">this</span>.email, <span class="hljs-attr">username</span>: <span class="hljs-built_in">this</span>.username, <span class="hljs-attr">fullName</span>: <span class="hljs-built_in">this</span>.fullName }; <span class="hljs-keyword">return</span> jwt.sign(payload, process.env.ACCESS_TOKEN_SECRET, { <span class="hljs-attr">expiresIn</span>: process.env.ACCESS_TOKEN_EXPIRY });};</code></pre><pre><code class="lang-javascript">userSchema.methods.generateRefreshToken = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">const</span> payload = { <span class="hljs-attr">_id</span>: <span class="hljs-built_in">this</span>._id }; <span class="hljs-keyword">return</span> jwt.sign(payload, process.env.REFRESH_TOKEN_SECRET, { <span class="hljs-attr">expiresIn</span>: process.env.REFRESH_TOKEN_EXPIRY });};</code></pre><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p>If you liked this article I'd also suggest you check out <a class="user-mention" href="https://hashnode.com/@hiteshchoudharylco">Hitesh Choudhary</a>'s content on YouTube</p><p>🥰Thank You if you liked this article, consider sharing it.</p>]]></content:encoded>
<hashnode:content><![CDATA[<h3 id="heading-introduction">Introduction :</h3><p>Tokens are used to authenticate users and authorize requests from clients without keeping the session data on the servers.</p><p>Tokens provide a way to avoid storing tokens in a database by encoding all of the necessary information in the token string itself.</p><p>The main benefit of this is that API servers are able to verify access tokens without doing a database lookup on every API request, making the API much more easily scalable.</p><p>Here in this article we will talk about Access token and Refresh token.</p><h3 id="heading-access-token">Access Token :</h3><p>An access token provides temporary access to restricted resources such as APIs or other resources of the website.</p><p>Access token is a bearer token. This means that those who have it can access the resources of the website. It is focuses more on accessing the resources rather than identification. Malicious users can compromise a system and steal access token and use it to access the restricted resources. There are many ways to avoid this by following some best practices.</p><p>Generally access tokens are short lived having lifespan ranging from a few minutes to a few hours. This ensures that even if the access token is compromised it can be used only for a limited amount of time before it expires.</p><p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1708435613014/5a80a491-c968-4089-b582-105d9d2830ba.avif" alt class="image--center mx-auto" /></p><h3 id="heading-refresh-token">Refresh Token :</h3><p>As we have seen that access tokens are short lived hence there is a need to regenerate a new access token to be able to use the restricted resources. This can be achieved by either making the user to again login entering the credentials or by using refresh tokens. Making the client login frequently can destroy the user experience. Hence we use refresh tokens.</p><p>Once the access token expires the client can use refresh token to generate ( refreshed ) a new access token. Hence refresh token acts as a credential that lets the client have new access token without making them login again by entering the credentials. The client can generate as many access tokens with the help of refresh token till the refresh token is valid and not expired. The refresh tokens have a longer duration of life when compared to access token.</p><p>Refresh token is very important and it gives a lot of power to the client hence a compromise in its security can give its access to malicious users. These users whether being legitimate or not can generate access tokens. To avoid this happening companies use various methods one of them is Refresh Token Rotation.</p><h3 id="heading-refresh-token-rotation">Refresh Token Rotation :</h3><p>Refresh token rotation is the process in which whenever a new access token is generated ( refreshed ) a new refresh token is also generated and returned.</p><p>To know more about Refresh Token Rotation checkout:</p><div class="embed-wrapper"><div class="embed-loading"><div class="loadingRow"></div><div class="loadingRow"></div></div><a class="embed-card" href="https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation">https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation</a></div><p> </p><h3 id="heading-defining-a-method-to-generate-access-token-and-refresh-token-using-mongoose">Defining a method to generate access token and refresh token using mongoose:</h3><pre><code class="lang-javascript">userSchema.methods.generateAccessToken = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">const</span> payload = { <span class="hljs-attr">_id</span>: <span class="hljs-built_in">this</span>._id, <span class="hljs-attr">email</span>: <span class="hljs-built_in">this</span>.email, <span class="hljs-attr">username</span>: <span class="hljs-built_in">this</span>.username, <span class="hljs-attr">fullName</span>: <span class="hljs-built_in">this</span>.fullName }; <span class="hljs-keyword">return</span> jwt.sign(payload, process.env.ACCESS_TOKEN_SECRET, { <span class="hljs-attr">expiresIn</span>: process.env.ACCESS_TOKEN_EXPIRY });};</code></pre><pre><code class="lang-javascript">userSchema.methods.generateRefreshToken = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">const</span> payload = { <span class="hljs-attr">_id</span>: <span class="hljs-built_in">this</span>._id }; <span class="hljs-keyword">return</span> jwt.sign(payload, process.env.REFRESH_TOKEN_SECRET, { <span class="hljs-attr">expiresIn</span>: process.env.REFRESH_TOKEN_EXPIRY });};</code></pre><hr /><p>👋 Hello, I'm Aditya Verma 😁</p><p>If you liked this article I'd also suggest you check out <a class="user-mention" href="https://hashnode.com/@hiteshchoudharylco">Hitesh Choudhary</a>'s content on YouTube</p><p>🥰Thank You if you liked this article, consider sharing it.</p>]]></hashnode:content>
<hashnode:coverImage>https://cdn.hashnode.com/res/hashnode/image/upload/v1708443140344/e1aad34f-2f04-4347-8a91-ee6158e95dca.png</hashnode:coverImage>
</item>
</channel>
</rss>